<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Linux on A Random Walk</title>
    <link>https://rrampage.github.io/tags/linux/</link>
    <description>Recent content in Linux on A Random Walk</description>
    <generator>Hugo -- 0.144.2</generator>
    <language>en</language>
    <lastBuildDate>Mon, 25 May 2020 17:32:54 +0000</lastBuildDate>
    <atom:link href="https://rrampage.github.io/tags/linux/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Webhook to auto-deploy on git push to Github</title>
      <link>https://rrampage.github.io/2020/05/25/webhook-to-auto-deploy-on-git-push-to-github/</link>
      <pubDate>Mon, 25 May 2020 17:32:54 +0000</pubDate>
      <guid>https://rrampage.github.io/2020/05/25/webhook-to-auto-deploy-on-git-push-to-github/</guid>
      <description>Use git push webhook to run CI or auto-deploy</description>
      <content:encoded><![CDATA[<h2 id="what-is-a-webhook">What is a webhook?</h2>
<p>A <a href="https://en.wikipedia.org/wiki/Webhook">webhook</a> is an endpoint on your server which allows you to execute a particular task. Webhooks are usually triggered by some event. A good use-case for a webhook is running tests on a dedicated test server or deploying your latest <code>master</code> branch to staging/production.</p>
<p><a href="https://developer.github.com/webhooks/">Github</a> / <a href="https://docs.gitlab.com/ee/user/project/integrations/webhooks.html">Gitlab</a> / Bitbucket allow you to specify a webhook URL in your repository settings. Github triggers the webhook which sends the event data on every push.</p>
<h2 id="webhook-server"><a href="https://github.com/adnanh/webhook">Webhook</a> server</h2>
<p><a href="https://github.com/adnanh/webhook">Webhook</a> is a very useful golang project which runs any script you specify when a particular endpoint is hit.</p>
<p>Download and extract the binary for your operating system from the <a href="https://github.com/adnanh/webhook/releases">releases page</a>. For Linux, it is <a href="https://github.com/adnanh/webhook/releases/download/2.7.0/webhook-linux-amd64.tar.gz">here</a>.</p>
<p>The program takes as config a <strong><code>hooks.json</code></strong> file:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;hello-world&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;execute-command&#34;</span><span class="p">:</span> <span class="s2">&#34;/home/user/scripts/hello.sh&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;command-working-directory&#34;</span><span class="p">:</span> <span class="s2">&#34;/home/user/webhook&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span></code></pre></div><p>Replace <code>user</code> with the username of your linux user.</p>
<p>The <code>hello.sh</code> script.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="nb">echo</span> <span class="s1">&#39;Hello!&#39;</span>
</span></span></code></pre></div><p>Make the script executable by running <strong><code>chmod +x hello.sh</code></strong></p>
<p>Start webhook server as <strong><code>webhook -hooks hooks.json -hotreload -logfile webhooks.log</code></strong>. The server will run on port 9000 by default. You can check if everything is working by running <strong><code>curl http://localhost:9000/hooks/hello-world</code></strong>. This will print &ldquo;Hello!&rdquo; in the log file.</p>
<h2 id="deploy-script">Deploy script</h2>
<p>For the purpose of this post, I&rsquo;ll assume the script is called <strong><code>deploy</code></strong> and is at location <code>/home/user/scripts/deploy</code>. This script will vary depending on your tech stack and the complexity of your CI process.</p>
<p>A simple example <code>deploy</code> script:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="c1"># If you have a build server which creates binary/jar/artifact</span>
</span></span><span class="line"><span class="cl">wget <span class="s1">&#39;ARTIFACT_URL&#39;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Else, git pull and build on the server itself</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Assuming this script stops old instance of your code and starts a new instance with latest artifact </span>
</span></span><span class="line"><span class="cl">restart-service.sh
</span></span></code></pre></div><h3 id="configuration-to-run-deploy-script">Configuration to run deploy script</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;deploy-from-git&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;execute-command&#34;</span><span class="p">:</span> <span class="s2">&#34;/home/user/scripts/deploy&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;command-working-directory&#34;</span><span class="p">:</span> <span class="s2">&#34;/home/user/scripts&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;trigger-rule&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;and&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">      <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nt">&#34;match&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">          <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;payload-hash-sha1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;secret&#34;</span><span class="p">:</span> <span class="s2">&#34;MyTotallySecretString&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;parameter&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">              <span class="nt">&#34;source&#34;</span><span class="p">:</span> <span class="s2">&#34;header&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">              <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;X-Hub-Signature&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">          <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nt">&#34;match&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">          <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;value&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;value&#34;</span><span class="p">:</span> <span class="s2">&#34;refs/heads/master&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;parameter&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">              <span class="nt">&#34;source&#34;</span><span class="p">:</span> <span class="s2">&#34;payload&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">              <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;ref&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">          <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span></code></pre></div><p>The <strong>trigger-rule</strong> in config above will ensure that the script is only triggered when header from Github request contains <strong>&ldquo;X-Hub-Signature&rdquo;</strong> with a secret string and the push has occured in master branch.</p>
<p>Make sure that the secret string (&ldquo;secret&rdquo; : &ldquo;MyTotallySecretString&rdquo;) is randomly generated. This secret will need to be entered in Github settings as well.</p>
<p>For Gitlab and Bitbucket, example hook config can be found on repo page <a href="https://github.com/adnanh/webhook/blob/master/docs/Hook-Examples.md">here</a></p>
<h2 id="expose-your-webhook-server-safely-to-the-internet">Expose your webhook server safely to the internet</h2>
<p>There are 2 ways of exposing the webhook server to github:</p>
<ul>
<li>Proxy using Nginx</li>
<li>Via a tunnel e.g by downloading <a href="https://ngrok.com/product">ngrok</a> and then running <code>ngrok http 9000</code></li>
</ul>
<h3 id="nginx-configuration">Nginx configuration</h3>
<p>Preferably use HTTPS for your domain with Nginx. A good tutorial <a href="https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-18-04">here</a>.</p>
<p>Example Nginx config (HTTPS):</p>
<pre tabindex="0"><code>upstream webhook {
    server localhost:9000;
}

server {
	listen 443 ssl http2;
        server_name YOUR.DOMAIN.COM;
	ssl_certificate YOUR_CERT_CHAIN; # e.g /etc/letsencrypt/live/DOMAIN/fullchain.pem;
	ssl_certificate_key YOUR_CERT_KEY; # e.g /etc/letsencrypt/live/DOMAIN/privkey.pem;
	include /etc/nginx/options-ssl-nginx.conf;
	ssl_dhparam /etc/nginx/ssl-dhparams.pem;
        location ~ ^/hooks/(.+)$ {
		proxy_pass http://webhook;
	}
}
</code></pre><h2 id="add-your-webhook-url-to-github">Add your webhook URL to Github</h2>
<p>Go to the settings page of your Github repo then click on Webhook. Enter the URL of your webhook server. If using Nginx, it should be something like <code>https://YOUR.DOMAIN.COM/hooks/deploy-from-git</code>. Make sure you select content type as <code>application/json</code> and secret to the secret you generated earlier.</p>
<h2 id="bonus-create-a-systemd-user-service-for-webhook-linux">Bonus: Create a systemd user service for webhook (Linux)</h2>
<p>Create a systemd unit file with path <strong>/home/user/.config/systemd/user/webhook.service</strong> . This service does not require sudo/root permissions and can be run by the unprivileged user.</p>
<pre tabindex="0"><code>[Unit]
AssertPathExists=/home/user/scripts

[Service]
WorkingDirectory=/home/user/scripts
ExecStart=/home/user/scripts/webhook -hooks hooks.json -hotreload -logfile webhooks.log
Restart=always
PrivateTmp=true
NoNewPrivileges=true

[Install]
WantedBy=default.target
</code></pre><p>Do <code>systemctl --user daemon-reload</code> and <code>systemctl --user start webhook.service</code>. You can <code>systemctl --user enable webhook.service</code> to ensure that the service always runs when your machine is booted.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Setting display brightness on Linux from the command line</title>
      <link>https://rrampage.github.io/2020/05/19/setting-display-brightness-on-linux-from-the-command-line/</link>
      <pubDate>Tue, 19 May 2020 16:10:26 +0000</pubDate>
      <guid>https://rrampage.github.io/2020/05/19/setting-display-brightness-on-linux-from-the-command-line/</guid>
      <description>Auto-adjust the brightness on display in Linux</description>
      <content:encoded><![CDATA[<h2 id="setting-display-brightness-using-xrandr">Setting display brightness using <code>xrandr</code></h2>
<p>I auto-adjust the brightness on my display using a <a href="https://en.wikipedia.org/wiki/Cron">cron</a> which runs at 7 pm everyday.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">xrandr --output eDP-1 --brightness 0.9
</span></span></code></pre></div><p>This sets the brightness to 90% of maximum brightness.</p>
<h2 id="working-with-linux-display-environments-in-a-cron">Working with Linux Display environments in a cron</h2>
<p>The above command works when run from my terminal. But when run on a cron, it does not produce any effect. We need to explicitly mention the &ldquo;display number&rdquo; as an environment variable <code>DISPLAY</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="m">8</span> <span class="m">19</span> * * * <span class="nv">DISPLAY</span><span class="o">=</span>:0 xrandr --verbose --output eDP-1 --brightness 0.9
</span></span></code></pre></div><h3 id="how-to-get-the-display-number-of-your-monitor">How to get the display number of your monitor?</h3>
<p>Running <code>xrandr</code> will give you a lot of output like</p>
<pre tabindex="0"><code>Screen 0: minimum 320 x 200, current 1920 x 1080, maximum 16384 x 16384
eDP-1 connected primary 1920x1080+0+0 (normal left inverted right x axis y axis)
</code></pre><p>In my case, the display number is <code>:0</code></p>
<h3 id="adjusting-backlight-brightness-vs-perceived-brightness">Adjusting backlight brightness vs perceived brightness</h3>
<p>If <code>xrandr</code> is unable to find backlight, it only changes &ldquo;perceived&rdquo; brightness i.e it does <a href="https://wiki.archlinux.org/index.php/backlight#Color_correction">software color correction</a>. If we want to save battery, we will need to reduce the backlight brightness.</p>
<p>In Linux, the backlights can be found in <code>/sys/class/backlight</code>. In my case, it was <code>/sys/class/backlight/intel_backlight</code>. In this folder, there are many files like</p>
<pre tabindex="0"><code>actual_brightness
max_brightness
brightness
</code></pre><p><code>max_brightness</code> shows highest possible level of brightness for the display. We can adjust the value in <code>brightness</code> file to reduce backlight brightness.
Here&rsquo;s what I do to adjust it: <code>echo 1800 &gt; /sys/class/backlight/intel_backlight/brightness</code> (in root crontab)</p>
<p>Unlike the xrandr command, this does not require setting any DISPLAY variable in the cron file.</p>
<h2 id="other-tools">Other tools</h2>
<ul>
<li><a href="https://github.com/Hummer12007/brightnessctl">brightnessctl</a> is an easy to use tool which integrates well with systemd. It is also available in the package managers of various distributions like Debian, Ubuntu, Arch Linux.</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Easy VPN using Wireguard</title>
      <link>https://rrampage.github.io/2018/12/14/easy-vpn-using-wireguard/</link>
      <pubDate>Fri, 14 Dec 2018 11:48:44 +0000</pubDate>
      <guid>https://rrampage.github.io/2018/12/14/easy-vpn-using-wireguard/</guid>
      <description>Setup a painless VPN using Wireguard</description>
      <content:encoded><![CDATA[<h2 id="why-wireguard-and-how-does-it-work">Why Wireguard and How does it work?</h2>
<ul>
<li>Simple (one config file on server and client and one command to run)</li>
<li>Small codebase (5000 LOC) unlike OpenVPN and IPSEC</li>
<li>Scheduled to be merged into Linux kernel soon</li>
</ul>
<p>Wireguard works by creating a tunnel to the server using a separate network interface on your machine.
You do not need to worry about Proxy settings and all your applications will work without issue.</p>
<h2 id="installation-and-key-generation">Installation and Key Generation</h2>
<p>Do this on both server and client machines</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1">#Installation: For both machines</span>
</span></span><span class="line"><span class="cl">sudo apt install wireguard wireguard-tools openresolv
</span></span><span class="line"><span class="cl"><span class="c1"># openresolv is in case you are using systemd-resolved which is default for DNS resolution on Ubuntu</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Generate private and public key pair : For both machines</span>
</span></span><span class="line"><span class="cl"><span class="nb">umask</span> <span class="m">077</span>
</span></span><span class="line"><span class="cl">wg genkey <span class="p">|</span> tee privatekey <span class="p">|</span> wg pubkey &gt; publickey
</span></span></code></pre></div><h2 id="configure-server">Configure Server</h2>
<p>Create file called <code>/etc/wireguard/wg0.conf</code></p>
<pre tabindex="0"><code>[Interface]
PrivateKey = &lt;Private Key&gt;
ListenPort = &lt;UDP Port to listen on, by default it is 51820&gt;
Address = 192.168.2.1/24, fd86:ea04:1115::1/64
ListenPort = 51820
PostUp = iptables -A FORWARD -i wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE; ip6tables -A FORWARD -i wg0 -j ACCEPT; ip6tables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
PostDown = iptables -D FORWARD -i wg0 -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE; ip6tables -D FORWARD -i wg0 -j ACCEPT; ip6tables -t nat -D POSTROUTING -o eth0 -j MASQUERADE
SaveConfig = true

[Peer]
PublicKey = &lt;Client Public Key&gt;
AllowedIPs = 192.168.2.2/32
</code></pre><p>Note that you have to paste the <strong>contents</strong> of the private key in the conf file, not the path.
The <strong>PostUp</strong> sets up forwarding rules when the wiregaurd interface is started. <strong>PostDown</strong> deletes the rules when the interface is shutdown.
Packet forwarding is essential if you want to use your server as a VPN to the general internet. Enable it on your server by adding the following to <code>/etc/sysctl.conf</code> and run <code>sudo sysctl -p</code> to reload the configuration changes.</p>
<pre tabindex="0"><code># Add to end of /etc/sysctl.conf
net.ipv4.ip_forward=1
net.ipv6.conf.all.forwarding=1
</code></pre><p>Whitelist the UDP port so that it is reachable by client</p>
<pre tabindex="0"><code>sudo ufw allow 51820/udp
sudo ufw enable
</code></pre><h2 id="configure-client">Configure Client</h2>
<p>Create file called <code>/etc/wireguard/wg0.conf</code></p>
<pre tabindex="0"><code>[Interface]
PrivateKey = &lt;Private Key&gt;
Address = 192.168.2.2/32
SaveConfig = true

[Peer]
PublicKey = &lt;Server Public Key&gt;
AllowedIPs = 0.0.0.0/0, ::/0
Endpoint = &lt;Server Public IP: Port e.g 23.23.23.23:2323&gt;
</code></pre><p>Note that the <strong>Address</strong> in interface part of client must be within range of <strong>AllowedIPs</strong> in server&rsquo;s config.
If you are not using the server as a VPN, you can restrict the <strong>AllowedIPs</strong> section of client.</p>
<h2 id="start-server-and-client">Start Server and Client</h2>
<p>Run <code>sudo wg-quick up wg0</code>
Enable it to run as service on system startup using <code>sudo systemctl enable wg-quick@wg0</code>
If you want to stop, use <code>sudo wg-quick down wg0</code></p>
<h2 id="test-connection">Test connection</h2>
<pre tabindex="0"><code># Ping Google
ping -c3 8.8.8.8
sudo wg # shows tyou status of the wireguard connection
</code></pre><h2 id="resources">Resources</h2>
<ul>
<li><a href="https://www.wireguard.com/papers/wireguard.pdf">Whitepaper</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-create-a-point-to-point-vpn-with-wireguard-on-ubuntu-16-04">Adapted from</a></li>
<li><a href="https://www.timdoug.com/log/2018/08/04/#wireguard_macos">OSX</a></li>
<li><a href="https://play.google.com/store/apps/details?id=com.wireguard.android&amp;hl=en_US">Android client</a></li>
<li><a href="https://www.wireguard.com/install/">More platforms</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Bash Command Completion - Finding all the cats in your $PATH!</title>
      <link>https://rrampage.github.io/2018/11/15/bash-command-completion-finding-all-the-cats-in-your-path/</link>
      <pubDate>Thu, 15 Nov 2018 09:39:37 +0000</pubDate>
      <guid>https://rrampage.github.io/2018/11/15/bash-command-completion-finding-all-the-cats-in-your-path/</guid>
      <description>How to search for programs on the terminal</description>
      <content:encoded><![CDATA[<p>Today, I was curious to find out <strong>how many programs ending with <code>cat</code></strong> I had on my system. I remember using <code>cat</code>, <code>zcat</code> and wanted to know if there are similar programs. Pressing TAB after <code>cat</code> only gives programs which start with <code>cat</code>.</p>
<h2 id="1-apropos">1. <code>apropos</code></h2>
<p>In my <a href="https://dev.to/rrampage/getting-help-in-the-terminal-4cmo">last post</a>, I had mentioned that apropos is a way to search for what programs are available on your system. The search string for <code>apropos</code> can be any regex. So, <code>apropos 'cat$'</code> should solve the problem. <code>cat$</code> means all words ending with &lsquo;cat&rsquo;</p>
<p>The output has</p>
<pre tabindex="0"><code>STAILQ_CONCAT (3)     - implementations of singly-linked lists, singly-linked tail queues, lists and tail queues
OPENSSL_strlcat (3ssl) - Memory allocation functions
..
bzcat (1)            - decompresses files to stdout
cat (1)              - concatenate files and print on the standard output
fc-cat (1)           - read font information cache files
gencat (1)           - Generate message catalog
</code></pre><p>Clearly, the top 2 do not look like programs. Why is <code>apropos</code> then returning them?
Let&rsquo;s have a look at the <code>apropos</code> manual</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">man apropos
</span></span><span class="line"><span class="cl"><span class="c1"># apropos - search the manual page names and descriptions</span>
</span></span></code></pre></div><p>So <code>apropos</code> searches the <code>man</code> pages. And looks like there are <code>man</code> pages for other things and not just programs&hellip;</p>
<p>Digging deeper, let&rsquo;s try manual for the <code>man</code> pages!</p>
<pre tabindex="0"><code>man man
# The table below shows the section numbers of the manual followed by the types of pages they contain.
#       1   Executable programs or shell commands
#       2   System calls (functions provided by the kernel)
#       3   Library calls (functions within program libraries)
#       4   Special files (usually found in /dev)
#       5   File formats and conventions eg /etc/passwd
#       6   Games
#       7   Miscellaneous (including macro packages and conventions), e.g. man(7), groff(7)
#       8   System administration commands (usually only for root)
#       9   Kernel routines [Non standard]
</code></pre><p>Ok. We are interested in are executable programs i.e section 1 of the man pages. <code>apropos</code> has a way to limit which sections we search using<code>-s</code> flag.
<strong><code>apropos -s 1 'cat$'</code></strong> gives us all programs ending with name <code>cat</code> which have an entry in the man pages but it does not show us any programs which do not have a man page.</p>
<h2 id="2-list-all-programs-on-your-path">2. List all programs on your path</h2>
<p>The way Bash knows which programs can be called directly by their name (e.g <code>ls</code>) and not by their full path (e.g <code>/usr/bin/ls</code>) is by looking at the <code>$PATH</code> environment variable.</p>
<p>** Listing all executable files on path **</p>
<p>Here&rsquo;s a small bash snippet which lists the executable files in PATH (let&rsquo;s call it <code>paths.sh</code>)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="c1"># The directories in $PATH are separated by &#34;:&#34;, so we split by it to get individual directories</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> pdir in <span class="k">$(</span><span class="nb">echo</span> <span class="s2">&#34;</span><span class="nv">$PATH</span><span class="s2">&#34;</span> <span class="p">|</span> tr <span class="s2">&#34;:&#34;</span> <span class="s2">&#34;\n&#34;</span><span class="k">)</span>
</span></span><span class="line"><span class="cl"><span class="k">do</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># We `find` all files in the directory which are executable and print the filename</span>
</span></span><span class="line"><span class="cl">    find <span class="s2">&#34;</span><span class="nv">$pdir</span><span class="s2">&#34;</span> -maxdepth <span class="m">1</span> -executable -type f -printf <span class="s2">&#34;%f\n&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">done</span>
</span></span></code></pre></div><p>If you prefer Python, here&rsquo;s a small Python program for the same (let&rsquo;s call it <code>paths.py</code>)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">chain</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="n">path_dirs</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s1">&#39;PATH&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;:&#39;</span><span class="p">)</span> <span class="c1"># Split PATH by &#39;:&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">path_dirs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">all_files</span> <span class="o">=</span> <span class="n">chain</span><span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">walk</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">path_dirs</span><span class="p">))</span> <span class="c1"># Iterable of all files in the directories contained in PATH</span>
</span></span><span class="line"><span class="cl"><span class="n">is_exec</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span> <span class="p">:</span> <span class="n">os</span><span class="o">.</span><span class="n">access</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">os</span><span class="o">.</span><span class="n">X_OK</span><span class="p">)</span> <span class="c1"># Function to check if a filename is executable</span>
</span></span><span class="line"><span class="cl"><span class="n">execs</span> <span class="o">=</span> <span class="n">chain</span><span class="p">(</span><span class="o">*</span><span class="p">([</span><span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">fs</span> <span class="k">if</span> <span class="n">is_exec</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">r</span><span class="p">,</span><span class="n">f</span><span class="p">))]</span> <span class="k">for</span> <span class="n">r</span><span class="p">,</span><span class="n">_</span><span class="p">,</span><span class="n">fs</span> <span class="ow">in</span> <span class="n">all_files</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">execs</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span></span></code></pre></div><p>Running either our Bash or Python scripts will give us the correct output!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sh paths.sh <span class="p">|</span> grep <span class="s1">&#39;cat$&#39;</span>
</span></span><span class="line"><span class="cl">python3 paths.py <span class="p">|</span> grep <span class="s1">&#39;cat$&#39;</span>
</span></span></code></pre></div><h2 id="3-power-of-bash-completion">3. Power of Bash Completion!</h2>
<p>When I press TAB TAB after typing a letter, I get a list of suggestions. How does Bash do that? The <a href="https://www.gnu.org/software/bash/manual/html_node/Programmable-Completion.html">Bash manual</a> says that it uses <code>complete</code> and <code>compgen</code> built-ins for suggesting completions.</p>
<p><code>compgen</code> generates completions using a list of words (-W) or list of commands (-c). The latter is of particular interest to us. <code>compgen -c</code> prints every executable on our path and all shell built-ins and shell-functions.</p>
<p><code>compgen --help</code> prints following message:
<code>compgen: compgen [-abcdefgjksuv] [-o option] [-A action] [-G globpat] [-W wordlist]  [-F function] [-C command] [-X filterpat] [-P prefix] [-S suffix] [word] Display possible completions depending on the options.</code></p>
<p>The options stand for:</p>
<ul>
<li>a : aliases</li>
<li>b : shell builtins</li>
<li><strong>c : executable commands</strong></li>
<li>d : directories in current directory</li>
<li>e : <strong>export</strong> variables</li>
<li>f : files in current directory</li>
<li>g : groups in system</li>
<li>j : pending jobs (in background / stopped)</li>
<li>k : Bash <strong>keywords</strong></li>
<li>s : System services</li>
<li>u : users</li>
<li>v : All shell variables</li>
</ul>
<p>So <strong><code>compgen -c | grep 'cat$'</code></strong> should give us every single executable ending with <code>cat</code>.</p>
<h2 id="epilogue">Epilogue</h2>
<p>Diving into this rabbit-hole has given me a better understanding of how Bash completion works, how apropos finds relevant programs and why man pages are organized into various sections.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Command-line productivity tips : Getting help in the terminal</title>
      <link>https://rrampage.github.io/2018/11/11/command-line-productivity-tips-getting-help-in-the-terminal/</link>
      <pubDate>Sun, 11 Nov 2018 17:30:30 +0000</pubDate>
      <guid>https://rrampage.github.io/2018/11/11/command-line-productivity-tips-getting-help-in-the-terminal/</guid>
      <description>What to do when you are stuck in the command-line</description>
      <content:encoded><![CDATA[<p>The command-line is often a daunting place for beginners. With nothing but a blinking cursor and an unfriendly dark screen staring back at you, despair sets in.</p>
<p>Here are a few things to do if you are stuck:</p>
<h2 id="1-how-to-find-programs-for-specific-tasks">1. How to find programs for specific tasks</h2>
<p>Many times, you want to do a particular task but you do not remember the name of the program which does that. Many shell utilities are not easy to remember at first with their cryptic 2 letter names.</p>
<p>Worry not, there is a command called <strong><code>apropos</code></strong> to help you out!</p>
<p>For example, you want to <strong>show a file with line numbers</strong>. You know that there is a program but have forgotten its name. You can just type <code>apropos -a line number</code> to get a list of programs. We use <code>-a</code> flag so that <code>apropos</code> will only return those programs which have the words <strong><code>line</code> AND <code>number</code></strong> in their description.</p>
<p>On my computer, it gives the following output:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">apropos -a line number
</span></span><span class="line"><span class="cl"><span class="c1"># Output:</span>
</span></span><span class="line"><span class="cl">addr2line <span class="o">(</span>1<span class="o">)</span>        - convert addresses into file names and line numbers.
</span></span><span class="line"><span class="cl">nl <span class="o">(</span>1<span class="o">)</span>               - number lines of files
</span></span><span class="line"><span class="cl">x86_64-linux-gnu-addr2line <span class="o">(</span>1<span class="o">)</span> - convert addresses into file names and line numbers.
</span></span></code></pre></div><p>There are 3 programs which have something to do with numbering lines. Let&rsquo;s find out what each of these programs does.</p>
<h2 id="2-find-out-what-a-program-does">2. Find out what a program does</h2>
<p>Let&rsquo;s have a look at our first candidate <code>addr2line</code>. <strong>Typing <code>--help</code> after the command is one way of finding out what a program does</strong>. It is a convention for command-line programs to print a small help message when you call them with <code>--help</code>. Some programs also allow do the same on calling with <code>-h</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">addr2line --help
</span></span><span class="line"><span class="cl"><span class="c1"># Output:</span>
</span></span><span class="line"><span class="cl">Usage: addr2line <span class="o">[</span>option<span class="o">(</span>s<span class="o">)]</span> <span class="o">[</span>addr<span class="o">(</span>s<span class="o">)]</span>
</span></span><span class="line"><span class="cl"> Convert addresses into line number/file name pairs.
</span></span><span class="line"><span class="cl"> If no addresses are specified on the <span class="nb">command</span> line, they will be <span class="nb">read</span> from stdin
</span></span><span class="line"><span class="cl">....
</span></span></code></pre></div><p>Ok. This does program does something with <code>addresses</code>, not what we are looking for. Moving on to the next in our list: <code>nl</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">nl --help
</span></span><span class="line"><span class="cl"><span class="c1"># Output:</span>
</span></span><span class="line"><span class="cl">Usage: nl <span class="o">[</span>OPTION<span class="o">]</span>... <span class="o">[</span>FILE<span class="o">]</span>...
</span></span><span class="line"><span class="cl">Write each FILE to standard output, with line numbers added.
</span></span><span class="line"><span class="cl">...
</span></span></code></pre></div><p>Looks like we found our program. Let&rsquo;s try it out. This is our file <code>foo.txt</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">cat foo.txt
</span></span><span class="line"><span class="cl"><span class="c1"># Output:</span>
</span></span><span class="line"><span class="cl">one
</span></span><span class="line"><span class="cl">two
</span></span><span class="line"><span class="cl">three
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">four
</span></span><span class="line"><span class="cl">five
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">nl foo.txt
</span></span><span class="line"><span class="cl"><span class="c1"># Output:</span>
</span></span><span class="line"><span class="cl">     <span class="m">1</span>  one
</span></span><span class="line"><span class="cl">     <span class="m">2</span>  two
</span></span><span class="line"><span class="cl">     <span class="m">3</span>  three
</span></span><span class="line"><span class="cl">       
</span></span><span class="line"><span class="cl">     <span class="m">4</span>  four
</span></span><span class="line"><span class="cl">     <span class="m">5</span>  five
</span></span></code></pre></div><p>It works ok but why is it not numbering blank lines?</p>
<h2 id="3-getting-detailed-information-about-a-program">3. Getting detailed information about a program</h2>
<p>The <code>--help</code> messages are very concise. If we want to know in detail what a program does, we need to consult the manual or <code>man</code> pages. These pages are very detailed documentation of what a program does, all its possible options and arguments. Type <code>man nl</code> and have a look at the information&hellip;</p>
<p>Woah! The terminal screen is filled with information!. You can navigate up and down using the arrow keys and press <code>q</code> to quit.</p>
<p>We can see the following in the output:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">-b, --body-numbering<span class="o">=</span>STYLE
</span></span><span class="line"><span class="cl">              use STYLE <span class="k">for</span> numbering body lines
</span></span><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">STYLE is one of:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">       a      number all lines
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">       t      number only nonempty lines
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">       n      number no lines
</span></span></code></pre></div><p>So, <strong><code>nl -b a foo.txt</code></strong> will number <strong>all</strong> lines in foo.txt which is what we want.</p>
<pre tabindex="0"><code>nl -b a foo.txt
# Output:
     1  one
     2  two
     3  three
     4
     5  four
     6  five
</code></pre><p>That seems to solve our problem.</p>
<p>There is also <code>info</code> command which gives even more detailed usage information. You can try it out using <strong><code>info nl</code></strong>.</p>
<h2 id="4-getting-examples-for-using-a-program">4. Getting examples for using a program</h2>
<p>But what if we just quickly want to get our command to work without having to read a huge wall of text?</p>
<p>Turns out, there is a nifty utility you can install called <strong><code>tldr</code></strong>. If you use <code>node</code> or <code>python</code> you can install using <code>npm install -g tldr</code> or <code>pip install tldr</code> respectively. The <a href="https://tldr.sh/">tldr page</a> has a list of other installation options. After installing it, just try out <code>tldr nl</code> in your terminal</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">tldr nl
</span></span><span class="line"><span class="cl"><span class="c1"># Output:</span>
</span></span><span class="line"><span class="cl">nl
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  A utility <span class="k">for</span> numbering lines, either from a file, or from standard input.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  - Number non-blank lines in a file:
</span></span><span class="line"><span class="cl">    nl file
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">....
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  - Number all lines including blank lines:
</span></span><span class="line"><span class="cl">    nl -b a file
</span></span></code></pre></div><p>There! We can see the example with easy to understand description.</p>
<p><code>tldr</code> is community-driven! People contribute examples for various commands. If your favorite command does not have an entry, you can submit a <a href="https://github.com/tldr-pages/tldr">pull request</a>.</p>
<h2 id="recap">Recap</h2>
<p>To recap, we can:</p>
<ul>
<li>Find out possible programs which do particular tasks using <strong><code>apropos</code></strong></li>
<li>Get help information for <strong><code>$program</code></strong> using <strong><code>$program --help</code></strong> or <strong><code>man $program</code></strong></li>
<li>Get examples using <strong><code>tldr $program</code></strong></li>
</ul>
<h3 id="ps-what-if-we-are-not-able-to-find-programs-for-our-tasks">PS: What if we are not able to find programs for our tasks</h3>
<p>In Section 1, we assume that we will be able to find programs for our task. But many times, we may not have it installed. In such cases, we can search our distribution&rsquo;s package manager e.g <code>apt-get</code> for Ubuntu or <code>yum</code> or <code>dnf</code> for CentOS / Fedora.</p>
<p>In Ubuntu, we can search all available packages in the repositories using <code>apt-cache search $KEYWORD</code>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Ensuring that a shell script runs exactly once</title>
      <link>https://rrampage.github.io/2018/11/06/ensuring-that-a-shell-script-runs-exactly-once/</link>
      <pubDate>Tue, 06 Nov 2018 18:53:23 +0000</pubDate>
      <guid>https://rrampage.github.io/2018/11/06/ensuring-that-a-shell-script-runs-exactly-once/</guid>
      <description>How to ensure that only one instance of a shell script runs at a time</description>
      <content:encoded><![CDATA[<p>Many times, we have shell scripts which perform some important stuff like inserting into database, mailing reports, etc which we want to run exactly one instance of.</p>
<h2 id="enter-locks">Enter locks!</h2>
<p>A simple solution is to create a &ldquo;lock file&rdquo; and check if the file exists when the script starts. If the file is already created, it means another instance of that program is running, so we can fail with message &ldquo;Try again later!&rdquo;. Once the script completes running, it will clean-up and delete the lock file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nv">LOCK_FILE</span><span class="o">=</span>a.lock
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> -f <span class="s2">&#34;</span><span class="nv">$LOCK_FILE</span><span class="s2">&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Lock file already exists, exit the script</span>
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> <span class="s2">&#34;An instance of this script is already running&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">exit</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Create the lock file</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;Locked&#34;</span> &gt; <span class="s2">&#34;</span><span class="nv">$LOCK_FILE</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Do the normal stuff</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># clean-up before exit</span>
</span></span><span class="line"><span class="cl">rm <span class="s2">&#34;</span><span class="nv">$LOCK_FILE</span><span class="s2">&#34;</span>
</span></span></code></pre></div><p>This looks promising but there are issues with this approach. What happens if the script does not end correctly i.e it exits because of some failure before it reaches the clean-up part of the code? Or if it gets forcibly terminated with <code>Ctrl+C</code> or <code>kill</code> command? In both these cases, the created lock file will not be deleted. So next time you run the script, you will always get an error and will have to manually delete the file.</p>
<p>There is another, more subtle error with the above code. A race condition. If two instances of scripts are started around the same time, it is possible that both of them get past the <code>if [ -f &quot;$LOCK_FILE&quot; ]</code> because the second instance may reach that part of the code before the first instance is able to create the lock file. Thus, we have more than one instance running.</p>
<h2 id="a-better-lock">A better lock!</h2>
<p>Is there a way to create a lock file which is more robust to race conditions and non-standard termination (<code>Ctrl+C</code>, <code>kill</code> command, etc)? Linux offers <code>flock</code> a utility to manage locks from shell scripts. Using <code>flock</code>, we can rewrite the above snippet as follows:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nv">LOCK_FILE</span><span class="o">=</span>a.lock
</span></span><span class="line"><span class="cl"><span class="nb">exec</span> 99&gt;<span class="s2">&#34;</span><span class="nv">$LOCK_FILE</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">flock -n <span class="m">99</span> <span class="o">||</span> <span class="nb">exit</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Do stuff and exit!</span>
</span></span></code></pre></div><p>The <code>exec 99&gt;&quot;$LOCK_FILE&quot;</code> creates a file descriptor numbered 99 and assigns it to <code>LOCK_FILE</code>. <a href="https://en.wikipedia.org/wiki/File_descriptor">File descriptors (fd)</a>  0, 1, 2 are for <code>stdin</code>, <code>stdout</code>, <code>stderr</code> respectively. We are creating new fd with a high number to ensure that it does not clash with numbered fds opened later-on by script.</p>
<p><code>flock -n 99 || exit 1</code> does 2 things. Firstly, it acquires an <code>exclusive</code> lock on the file descriptor 99 which refers to our <code>LOCK_FILE</code>. This operation is guaranteed by the linux kernel to be atomic. Secondly, if it fails to acquire the lock, it exits with return code 1. We do not need to worry about any clean up. <code>flock</code> will automatically release the lock when the script exits regardless of how it terminates. This solves our problem!</p>
<p>What if I wanted to add a more informational message instead of exiting directly on failure to acquire lock? We can change the line <code>flock -n 99 || exit 1</code> as follows:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">flock -n <span class="m">99</span>
</span></span><span class="line"><span class="cl"><span class="nv">RC</span><span class="o">=</span><span class="nv">$?</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> <span class="s2">&#34;</span><span class="nv">$RC</span><span class="s2">&#34;</span> !<span class="o">=</span> <span class="m">0</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Send message and exit</span>
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> <span class="s2">&#34;Already running script. Try again after sometime&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">exit</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span></code></pre></div><p>The flock <a href="http://man7.org/linux/man-pages/man1/flock.1.html">man page</a> has an example which you can use to add an exclusive lock to start of any shell script:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">FLOCKER</span><span class="si">}</span><span class="s2">&#34;</span> !<span class="o">=</span> <span class="s2">&#34;</span><span class="nv">$0</span><span class="s2">&#34;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">exec</span> env <span class="nv">FLOCKER</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$0</span><span class="s2">&#34;</span> flock -en <span class="s2">&#34;</span><span class="nv">$0</span><span class="s2">&#34;</span> <span class="s2">&#34;</span><span class="nv">$0</span><span class="s2">&#34;</span> <span class="s2">&#34;</span><span class="nv">$@</span><span class="s2">&#34;</span> <span class="o">||</span> :
</span></span></code></pre></div><p>This boilerplate uses the script file itself as a lock. It works by setting an environment variable <code>$FLOCKER</code> to script file name and executing the script with its original parameters after acquiring the lock. On failure however, it does not print anything and silently exits.</p>
<p><code>$0</code> here stands for name of the script. <code>$@</code> stands for all arguments passed to the script when it was called.</p>
<h2 id="use-case-for-me">Use case for me</h2>
<p>My team uses a test machine where we deploy multiple branches of a code-base. We need to make sure that exactly one person is building the project at a particular time. The deploy script pulls the specified branch of code from <code>git</code> and builds the project, deploys the main service and starts ancillary services. The script takes sometime to execute. If someone tries to deploy another branch while a build is ongoing, both can fail.</p>
<p>With the above snippet, calling the script more than once shows the current branch being built and exits with failure.</p>
<h2 id="further-reading">Further reading</h2>
<ul>
<li>Flock <a href="http://man7.org/linux/man-pages/man1/flock.1.html">man page</a></li>
<li><a href="http://mywiki.wooledge.org/BashFAQ/045">Pitfalls of creating a lock file</a> like in our initial snippet</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Surviving the Linux OOM Killer</title>
      <link>https://rrampage.github.io/2018/10/04/surviving-the-linux-oom-killer/</link>
      <pubDate>Thu, 04 Oct 2018 15:48:41 +0000</pubDate>
      <guid>https://rrampage.github.io/2018/10/04/surviving-the-linux-oom-killer/</guid>
      <description>How OOM Killer frees memory</description>
      <content:encoded><![CDATA[<p>When your Linux machine runs out of memory, <strong>Out of Memory (OOM) killer</strong> is called by kernel to free some memory. It is often encountered on servers which have a number of memory intensive processes running. In this post, we dig a little deeper into when does OOM killer get called, how it decides which process to kill and if we can prevent it from killing important processes like databases.</p>
<h2 id="how-does-oom-killer-choose-which-process-to-kill">How does OOM Killer choose which process to kill?</h2>
<p>The Linux kernel gives a score to each running process called <code>oom_score</code> which shows how likely it is to be terminated in case of low available memory. The score is proportional to the amount of memory used by the process. The score is <code>10 x percent of memory used by process</code>. So the maximum score is 100% x 10 = 1000. In addition, if a process is running as a <strong>privileged user</strong>, it gets a <strong>slightly lower oom_score</strong> as compared to same memory usage by a normal user process. In earlier versions of Linux ( v2.6.32 kernel), there was a more elaborate heuristic which calculated this score.</p>
<p>The <code>oom_score</code> of a process can be found in the <code>/proc</code> directory. Let&rsquo;s say that the process id (pid) of your process is 42, <code>cat /proc/42/oom_score</code> will give you the process&rsquo; score.</p>
<h2 id="can-i-ensure-some-important-processes-do-not-get-killed-by-oom-killer">Can I ensure some important processes do not get killed by OOM Killer?</h2>
<p>Yes! The OOM killer checks <code>oom_score_adj</code> to adjust its final calculated score. This file is present in <code>/proc/$pid/oom_score_adj</code>. You can add a large negative score to this file to ensure that your process gets a lower chance of being picked and terminated by OOM killer. The <code>oom_score_adj</code> can vary from -1000 to 1000. If you assign -1000 to it, it can use 100% memory and still avoid getting terminated by OOM killer. On the other hand, if you assign 1000 to it, the Linux kernel will keep killing the process even when it uses minimal memory.</p>
<p>Let&rsquo;s go back to our process with pid 42. Here is how you can change its <code>oom_score_adj</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">echo</span> -200 <span class="p">|</span> sudo tee - /proc/42/oom_score_adj
</span></span></code></pre></div><p>We need to do this as <code>root</code> user or <code>sudo</code> because Linux does not allow normal users to reduce the OOM score. You can increase the OOM score as a normal user without any special permissions. e.g <code>echo 100 &gt; /proc/42/oom_score_adj</code></p>
<p>There is also another, less fine-grained score called <code>oom_adj</code> which varies from -16 to 15. It is similar to <code>oom_score_adj</code>. In fact, when you set <code>oom_score_adj</code>, the kernel automatically scales it down and calculates <code>oom_adj</code>. <code>oom_adj</code> has a magic value of -17 which indicates that the given process should never be killed by OOM killer.</p>
<h2 id="display-oom-scores-of-all-running-processes">Display OOM scores of all running processes</h2>
<p>This script displays the OOM score and OOM adjusted score of all running processes, in descending order of OOM score</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#!/bin/bash</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Displays running processes in descending order of OOM score</span>
</span></span><span class="line"><span class="cl"><span class="nb">printf</span> <span class="s1">&#39;PID\tOOM Score\tOOM Adj\tCommand\n&#39;</span>
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="nb">read</span> -r pid comm<span class="p">;</span> <span class="k">do</span> <span class="o">[</span> -f /proc/<span class="nv">$pid</span>/oom_score <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">[</span> <span class="k">$(</span>cat /proc/<span class="nv">$pid</span>/oom_score<span class="k">)</span> !<span class="o">=</span> <span class="m">0</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">printf</span> <span class="s1">&#39;%d\t%d\t\t%d\t%s\n&#39;</span> <span class="s2">&#34;</span><span class="nv">$pid</span><span class="s2">&#34;</span> <span class="s2">&#34;</span><span class="k">$(</span>cat /proc/<span class="nv">$pid</span>/oom_score<span class="k">)</span><span class="s2">&#34;</span> <span class="s2">&#34;</span><span class="k">$(</span>cat /proc/<span class="nv">$pid</span>/oom_score_adj<span class="k">)</span><span class="s2">&#34;</span> <span class="s2">&#34;</span><span class="nv">$comm</span><span class="s2">&#34;</span><span class="p">;</span> <span class="k">done</span> &lt; &lt;<span class="o">(</span>ps -e -o <span class="nv">pid</span><span class="o">=</span> -o <span class="nv">comm</span><span class="o">=)</span> <span class="p">|</span> sort -k 2nr
</span></span></code></pre></div><h2 id="check-if-any-of-your-processes-have-been-oom-killed">Check if any of your processes have been OOM-killed</h2>
<p>The easiest way is to <code>grep</code> your system logs. In Ubuntu: <code>grep -i kill /var/log/syslog</code>. If a process has been killed, you may get results like <code>my_process invoked oom-killer: gfp_mask=0x201da, order=0, oom_score_adj=0</code></p>
<h2 id="caveats-of-adjusting-oom-scores">Caveats of adjusting OOM scores</h2>
<p>Remember that OOM is a symptom of a bigger problem - low available memory. The best way to solve it is by either increasing the available memory (e.g better hardware) or moving some programs to other machines or by reducing memory consumption of programs (e.g allocate less memory where possible).</p>
<p>Too much tweaking of the OOM adjusted score will result in random processes getting killed and not being able to free enough memory.</p>
<h2 id="references">References</h2>
<ol>
<li><a href="http://man7.org/linux/man-pages/man5/proc.5.html">proc</a> man page</li>
<li><a href="https://askubuntu.com/questions/60672/how-do-i-use-oom-score-adj/">https://askubuntu.com/questions/60672/how-do-i-use-oom-score-adj/</a></li>
<li><a href="https://linux-mm.org/OOM_Killer">Walkthrough</a> on which part of Linux code is called</li>
<li>Classic <a href="https://lwn.net/Articles/317814/">LWN article</a> (a bit dated)</li>
<li><a href="https://www.lynxbee.com/how-to-invoke-oom-killer-manually-for-understanding-which-process-gets-killed-first/">Invoking the OOM killer manually</a></li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>Disk Space Debugging Checklist</title>
      <link>https://rrampage.github.io/2018/05/04/disk-space-debugging-checklist/</link>
      <pubDate>Fri, 04 May 2018 00:00:00 +0530</pubDate>
      <guid>https://rrampage.github.io/2018/05/04/disk-space-debugging-checklist/</guid>
      <description>Checklist for debugging disk issues on Linux servers</description>
      <content:encoded><![CDATA[<p>Many times, smoothly running processes stop working mysteriously. You open the logs and see what is happening, only to find that even the logs have stopped updating. But the process itself is running. You SSH to the server and type cd TAB. Bash weeps &ldquo;Unable to create temporary file&rdquo;. The machine is out of disk space&hellip;</p>
<p>Here is a checklist to make disk space debugging easier, using standard Linux utilities so you can get started without having to install anything extra:</p>
<ol>
<li><strong><code>df -h</code></strong> command gives you an overview in a readable format about the number of disks mounted and their total and available capacities.</li>
<li>To get an idea of which folders/directories are eating up the maximum space, try out <strong><code>du -ch / | sort -h | tail -n 30</code></strong>. This gives you the 30 most space consuming directories. If you already know which directories generate maximum disk output e.g logs and temp files, you can replace the &lsquo;/&rsquo; with your directory (DIR) and run the command as <strong><code>du -ch DIR | sort -h | tail -n 30</code></strong></li>
<li>Now that we have identified the directories with maximum space consumed, we may need to delete some files and get our process going again. The <strong><code>rm</code></strong> command is your friend here. You can delete old logs and temporary files to free up space.</li>
<li>Many times, the culprit is a single large file which is already in use by a program e.g <code>catalina.out</code> by Apache Tomcat. If you want to free up space without shutting down the process, the <strong><code>truncate</code></strong> command will help you out. Example: <strong><code>truncate -s0 BIG_LOG.log</code></strong>. This will truncate the file to 0 bytes and still allow the other process to use it without issues (standard Unix permissions apply)</li>
<li>Sometimes, you delete files and still, the space does not seem to be recovered. This can be because some process is still holding on to the file descriptor of the deleted file. Once these processes are stopped, the space will be recovered. The <strong><code>lsof</code></strong> command will help you out here. It stands for <em>list open files</em>. You can find out which processes are using deleted files as follows: <code>lsof | grep deleted | grep OLD_FILENAME</code>. The lsof command gives you the process name and the process id so you can run <code>kill</code> on the process. If you do not know the name of the deleted file, you can still run <code>lsof | grep deleted</code> and see the output to check for any familiar file / process.</li>
</ol>
<p>Finally, keep in mind that disk space is one of the metrics you should monitor on your server. This checklist must be used in a pinch. If you find yourself constantly having disk space issues, the solution is to set up periodic deletion/rotation of old log files, alerts when the disk space reaches a particular threshold or to increase the disk size if your processes require a lot of disk space e.g Kafka, MySQL and other databases.</p>
<p>Let me know if there are some other tools I am missing out on and your experiences dealing with disk space issues!</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
