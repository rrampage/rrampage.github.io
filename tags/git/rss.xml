<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>git on A Random Walk</title>
    <link>https://rrampage.github.io/tags/git/</link>
    <description>Recent content in git on A Random Walk</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 25 May 2020 17:32:54 +0000</lastBuildDate><atom:link href="https://rrampage.github.io/tags/git/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Webhook to auto-deploy on git push to Github</title>
      <link>https://rrampage.github.io/2020/05/25/webhook-to-auto-deploy-on-git-push-to-github/</link>
      <pubDate>Mon, 25 May 2020 17:32:54 +0000</pubDate>
      
      <guid>https://rrampage.github.io/2020/05/25/webhook-to-auto-deploy-on-git-push-to-github/</guid>
      <description>Use git push webhook to run CI or auto-deploy</description>
      <content:encoded><![CDATA[<h2 id="what-is-a-webhook">What is a webhook?</h2>
<p>A <a href="https://en.wikipedia.org/wiki/Webhook">webhook</a> is an endpoint on your server which allows you to execute a particular task. Webhooks are usually triggered by some event. A good use-case for a webhook is running tests on a dedicated test server or deploying your latest <code>master</code> branch to staging/production.</p>
<p><a href="https://developer.github.com/webhooks/">Github</a> / <a href="https://docs.gitlab.com/ee/user/project/integrations/webhooks.html">Gitlab</a> / Bitbucket allow you to specify a webhook URL in your repository settings. Github triggers the webhook which sends the event data on every push.</p>
<h2 id="webhookhttpsgithubcomadnanhwebhook-server"><a href="https://github.com/adnanh/webhook">Webhook</a> server</h2>
<p><a href="https://github.com/adnanh/webhook">Webhook</a> is a very useful golang project which runs any script you specify when a particular endpoint is hit.</p>
<p>Download and extract the binary for your operating system from the <a href="https://github.com/adnanh/webhook/releases">releases page</a>. For Linux, it is <a href="https://github.com/adnanh/webhook/releases/download/2.7.0/webhook-linux-amd64.tar.gz">here</a>.</p>
<p>The program takes as config a <strong><code>hooks.json</code></strong> file:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;hello-world&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;execute-command&#34;</span><span class="p">:</span> <span class="s2">&#34;/home/user/scripts/hello.sh&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;command-working-directory&#34;</span><span class="p">:</span> <span class="s2">&#34;/home/user/webhook&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span></code></pre></div><p>Replace <code>user</code> with the username of your linux user.</p>
<p>The <code>hello.sh</code> script.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="nb">echo</span> <span class="s1">&#39;Hello!&#39;</span>
</span></span></code></pre></div><p>Make the script executable by running <strong><code>chmod +x hello.sh</code></strong></p>
<p>Start webhook server as <strong><code>webhook -hooks hooks.json -hotreload -logfile webhooks.log</code></strong>. The server will run on port 9000 by default. You can check if everything is working by running <strong><code>curl http://localhost:9000/hooks/hello-world</code></strong>. This will print &ldquo;Hello!&rdquo; in the log file.</p>
<h2 id="deploy-script">Deploy script</h2>
<p>For the purpose of this post, I&rsquo;ll assume the script is called <strong><code>deploy</code></strong> and is at location <code>/home/user/scripts/deploy</code>. This script will vary depending on your tech stack and the complexity of your CI process.</p>
<p>A simple example <code>deploy</code> script:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="c1"># If you have a build server which creates binary/jar/artifact</span>
</span></span><span class="line"><span class="cl">wget <span class="s1">&#39;ARTIFACT_URL&#39;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Else, git pull and build on the server itself</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Assuming this script stops old instance of your code and starts a new instance with latest artifact </span>
</span></span><span class="line"><span class="cl">restart-service.sh
</span></span></code></pre></div><h3 id="configuration-to-run-deploy-script">Configuration to run deploy script</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;deploy-from-git&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;execute-command&#34;</span><span class="p">:</span> <span class="s2">&#34;/home/user/scripts/deploy&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;command-working-directory&#34;</span><span class="p">:</span> <span class="s2">&#34;/home/user/scripts&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;trigger-rule&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;and&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">      <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nt">&#34;match&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">          <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;payload-hash-sha1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;secret&#34;</span><span class="p">:</span> <span class="s2">&#34;MyTotallySecretString&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;parameter&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">              <span class="nt">&#34;source&#34;</span><span class="p">:</span> <span class="s2">&#34;header&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">              <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;X-Hub-Signature&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">          <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nt">&#34;match&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">          <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;value&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;value&#34;</span><span class="p">:</span> <span class="s2">&#34;refs/heads/master&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;parameter&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">              <span class="nt">&#34;source&#34;</span><span class="p">:</span> <span class="s2">&#34;payload&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">              <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;ref&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">          <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span></code></pre></div><p>The <strong>trigger-rule</strong> in config above will ensure that the script is only triggered when header from Github request contains <strong>&ldquo;X-Hub-Signature&rdquo;</strong> with a secret string and the push has occured in master branch.</p>
<p>Make sure that the secret string (&ldquo;secret&rdquo; : &ldquo;MyTotallySecretString&rdquo;) is randomly generated. This secret will need to be entered in Github settings as well.</p>
<p>For Gitlab and Bitbucket, example hook config can be found on repo page <a href="https://github.com/adnanh/webhook/blob/master/docs/Hook-Examples.md">here</a></p>
<h2 id="expose-your-webhook-server-safely-to-the-internet">Expose your webhook server safely to the internet</h2>
<p>There are 2 ways of exposing the webhook server to github:</p>
<ul>
<li>Proxy using Nginx</li>
<li>Via a tunnel e.g by downloading <a href="https://ngrok.com/product">ngrok</a> and then running <code>ngrok http 9000</code></li>
</ul>
<h3 id="nginx-configuration">Nginx configuration</h3>
<p>Preferably use HTTPS for your domain with Nginx. A good tutorial <a href="https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-18-04">here</a>.</p>
<p>Example Nginx config (HTTPS):</p>
<pre tabindex="0"><code>upstream webhook {
    server localhost:9000;
}

server {
	listen 443 ssl http2;
        server_name YOUR.DOMAIN.COM;
	ssl_certificate YOUR_CERT_CHAIN; # e.g /etc/letsencrypt/live/DOMAIN/fullchain.pem;
	ssl_certificate_key YOUR_CERT_KEY; # e.g /etc/letsencrypt/live/DOMAIN/privkey.pem;
	include /etc/nginx/options-ssl-nginx.conf;
	ssl_dhparam /etc/nginx/ssl-dhparams.pem;
        location ~ ^/hooks/(.+)$ {
		proxy_pass http://webhook;
	}
}
</code></pre><h2 id="add-your-webhook-url-to-github">Add your webhook URL to Github</h2>
<p>Go to the settings page of your Github repo then click on Webhook. Enter the URL of your webhook server. If using Nginx, it should be something like <code>https://YOUR.DOMAIN.COM/hooks/deploy-from-git</code>. Make sure you select content type as <code>application/json</code> and secret to the secret you generated earlier.</p>
<h2 id="bonus-create-a-systemd-user-service-for-webhook-linux">Bonus: Create a systemd user service for webhook (Linux)</h2>
<p>Create a systemd unit file with path <strong>/home/user/.config/systemd/user/webhook.service</strong> . This service does not require sudo/root permissions and can be run by the unprivileged user.</p>
<pre tabindex="0"><code>[Unit]
AssertPathExists=/home/user/scripts

[Service]
WorkingDirectory=/home/user/scripts
ExecStart=/home/user/scripts/webhook -hooks hooks.json -hotreload -logfile webhooks.log
Restart=always
PrivateTmp=true
NoNewPrivileges=true

[Install]
WantedBy=default.target
</code></pre><p>Do <code>systemctl --user daemon-reload</code> and <code>systemctl --user start webhook.service</code>. You can <code>systemctl --user enable webhook.service</code> to ensure that the service always runs when your machine is booted.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Git Tagging Tutorial</title>
      <link>https://rrampage.github.io/2018/11/22/git-tagging-tutorial/</link>
      <pubDate>Thu, 22 Nov 2018 10:44:36 +0000</pubDate>
      
      <guid>https://rrampage.github.io/2018/11/22/git-tagging-tutorial/</guid>
      <description>How to create tags in your git repo from command line</description>
      <content:encoded><![CDATA[<p>I read a post on <a href="https://dev.to/zellwk/git-tags--37a">dev.to</a> which shows how to create git tags using GUI-based git clients. I think that tags are useful to know even when using the git cli.</p>
<h2 id="what-are-tags">What are tags</h2>
<p>Tags are specific points in your code history which are useful to re-visit later e.g
you just released a new version of your app. You can tag the commit as <code>v1.0</code> using <strong><code>git tag v1.0</code></strong>. Anytime you want to reproduce bugs encountered on that version,  simply do <strong><code>git checkout v1.0</code></strong> and investigate.</p>
<h2 id="how-to-use-git-tag-better">How to use <code>git tag</code> better</h2>
<h3 id="checkout-code-to-the-tag">Checkout code to the tag</h3>
<p>The tag is linked to the specific commit and not to a branch. When you checkout the tag, git tells you that you are in &ldquo;detached HEAD&rdquo; state. Do not worry, all it means is that you need to create a new branch if you want to retain any changes you make after checking out the tag.</p>
<p>Create a new branch exactly at the commit of the tag using <strong><code>git checkout -b BRANCH_NAME TAG_NAME</code></strong></p>
<h3 id="make-your-tag-more-informational">Make your tag more informational!</h3>
<p>You can add more information using <strong><code>git tag -a TAG_NAME -m 'MESSAGE'</code></strong>
The tag information can be viewed without having to checkout the tag using <strong><code>git show TAG_NAME</code></strong>.</p>
<h3 id="create-tag-at-a-particular-commit">Create tag at a particular commit</h3>
<p>You do not always have to be at the HEAD or in the tip of the branch to create a tag. If you want to create tag say 5 commits before HEAD, you can use <code>git log</code> to get the correct commit hash e.g <strong><code>git log --pretty=oneline -10</code></strong> which shows the last 10 commits on the current branch.</p>
<p>Then, create tag using <strong><code>git tag -a TAG_NAME -m 'MESSAGE' COMMIT_HASH</code></strong></p>
<h3 id="list-and-delete-tags">List and Delete tags</h3>
<p>Listing all tags is simply: <strong><code>git tag</code></strong>
Similarly, delete a tag using <strong><code>git tag -d TAG_NAME</code></strong></p>
<h3 id="share-your-tag-with-others">Share your tag with others!</h3>
<p>The tag created is not pushed to remote automatically. If you want your tags to be used by other contributors too, you need to push them using <strong><code>git push origin TAG_NAME</code></strong></p>
<h3 id="sign-your-tags">Sign your tags!</h3>
<p>If you are working on a major project and want to show without any doubt that you have worked on the release, you can sign it using your GPG private key as <strong><code>git tag -s TAG_NAME -m 'MESSAGE'</code></strong>. Anyone who runs <strong><code>git show TAG_NAME</code></strong> on the tag will also see your public key signature along with the tag information.</p>
<p>They can additionally verify the tag using <strong><code>git tag -v TAG_NAME</code></strong>. This checks using your public key whether the signature is indeed yours.</p>
<h2 id="tags-vs-branches">Tags vs Branches</h2>
<p>Why use tags when you have branches? Because branches can change and tags are linked to a specific commit. Thus, marking releases with a tag will give you the state of code when the particular software release was done.</p>
<h2 id="summary">Summary</h2>
<ul>
<li>Tags are great way to remember specific commits</li>
<li>It is good to add a message to the tag so that people can easily see why you tagged a particular commit</li>
</ul>
<h2 id="references">References</h2>
<p>The Git book chapters:</p>
<ul>
<li><a href="https://git-scm.com/book/en/v2/Git-Basics-Tagging">Tagging</a></li>
<li><a href="https://git-scm.com/book/en/v2/Git-Tools-Signing-Your-Work">Signing</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Git: How to keep your fork updated with remote repository</title>
      <link>https://rrampage.github.io/2018/11/09/git-how-to-keep-your-fork-updated-with-remote-repository/</link>
      <pubDate>Fri, 09 Nov 2018 12:50:54 +0000</pubDate>
      
      <guid>https://rrampage.github.io/2018/11/09/git-how-to-keep-your-fork-updated-with-remote-repository/</guid>
      <description>How to keep your Git fork updated with changes from remote</description>
      <content:encoded><![CDATA[<p>This is useful when you have forked a repository (repo), cloned it to your local machine and want to keep it in sync with the original repo.</p>
<h2 id="adding-the-remote-repo">Adding the remote repo</h2>
<p>We can list the remote repositories for our repo with <strong><code>git remote -v</code></strong> and add the original repo as follows:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git remote add upstream LINK_TO_ORIGINAL_REPO
</span></span></code></pre></div><p>Note that it is merely a convention to call it <strong><code>upstream</code></strong>. You can give any name you want.</p>
<p>Check that the repo is added to your remote using <strong><code>git remote -v</code></strong>.</p>
<h2 id="sync-with-remote">Sync with remote</h2>
<ul>
<li>Check if there are any changes in remote not on your fork using <strong><code>git fetch upstream</code></strong></li>
<li>Checkout whichever branch you are interested ( <strong><code>git checkout $BRANCH</code></strong>)</li>
<li>Merge with upstream using: <strong><code>git merge upstream/$BRANCH</code></strong></li>
<li>Push your changes to origin if needed: <strong><code>git push origin $BRANCH</code></strong></li>
</ul>
<h2 id="removing-the-remote-repo">Removing the remote repo</h2>
<p>If you no longer want to get changes from the remote repo, it is easy to remove it using <strong><code>git remote remove upstream</code></strong></p>
<h2 id="references">References</h2>
<p>Github&rsquo;s <a href="https://help.github.com/articles/syncing-a-fork/">help page</a></p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
