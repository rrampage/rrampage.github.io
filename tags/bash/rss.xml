<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>bash on A Random Walk</title>
    <link>https://rrampage.github.io/tags/bash/</link>
    <description>Recent content in bash on A Random Walk</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 25 May 2020 17:32:54 +0000</lastBuildDate><atom:link href="https://rrampage.github.io/tags/bash/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Webhook to auto-deploy on git push to Github</title>
      <link>https://rrampage.github.io/2020/05/25/webhook-to-auto-deploy-on-git-push-to-github/</link>
      <pubDate>Mon, 25 May 2020 17:32:54 +0000</pubDate>
      
      <guid>https://rrampage.github.io/2020/05/25/webhook-to-auto-deploy-on-git-push-to-github/</guid>
      <description>Use git push webhook to run CI or auto-deploy</description>
      <content:encoded><![CDATA[<h2 id="what-is-a-webhook">What is a webhook?</h2>
<p>A <a href="https://en.wikipedia.org/wiki/Webhook">webhook</a> is an endpoint on your server which allows you to execute a particular task. Webhooks are usually triggered by some event. A good use-case for a webhook is running tests on a dedicated test server or deploying your latest <code>master</code> branch to staging/production.</p>
<p><a href="https://developer.github.com/webhooks/">Github</a> / <a href="https://docs.gitlab.com/ee/user/project/integrations/webhooks.html">Gitlab</a> / Bitbucket allow you to specify a webhook URL in your repository settings. Github triggers the webhook which sends the event data on every push.</p>
<h2 id="webhookhttpsgithubcomadnanhwebhook-server"><a href="https://github.com/adnanh/webhook">Webhook</a> server</h2>
<p><a href="https://github.com/adnanh/webhook">Webhook</a> is a very useful golang project which runs any script you specify when a particular endpoint is hit.</p>
<p>Download and extract the binary for your operating system from the <a href="https://github.com/adnanh/webhook/releases">releases page</a>. For Linux, it is <a href="https://github.com/adnanh/webhook/releases/download/2.7.0/webhook-linux-amd64.tar.gz">here</a>.</p>
<p>The program takes as config a <strong><code>hooks.json</code></strong> file:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;hello-world&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;execute-command&#34;</span><span class="p">:</span> <span class="s2">&#34;/home/user/scripts/hello.sh&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;command-working-directory&#34;</span><span class="p">:</span> <span class="s2">&#34;/home/user/webhook&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span></code></pre></div><p>Replace <code>user</code> with the username of your linux user.</p>
<p>The <code>hello.sh</code> script.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="nb">echo</span> <span class="s1">&#39;Hello!&#39;</span>
</span></span></code></pre></div><p>Make the script executable by running <strong><code>chmod +x hello.sh</code></strong></p>
<p>Start webhook server as <strong><code>webhook -hooks hooks.json -hotreload -logfile webhooks.log</code></strong>. The server will run on port 9000 by default. You can check if everything is working by running <strong><code>curl http://localhost:9000/hooks/hello-world</code></strong>. This will print &ldquo;Hello!&rdquo; in the log file.</p>
<h2 id="deploy-script">Deploy script</h2>
<p>For the purpose of this post, I&rsquo;ll assume the script is called <strong><code>deploy</code></strong> and is at location <code>/home/user/scripts/deploy</code>. This script will vary depending on your tech stack and the complexity of your CI process.</p>
<p>A simple example <code>deploy</code> script:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="c1"># If you have a build server which creates binary/jar/artifact</span>
</span></span><span class="line"><span class="cl">wget <span class="s1">&#39;ARTIFACT_URL&#39;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Else, git pull and build on the server itself</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Assuming this script stops old instance of your code and starts a new instance with latest artifact </span>
</span></span><span class="line"><span class="cl">restart-service.sh
</span></span></code></pre></div><h3 id="configuration-to-run-deploy-script">Configuration to run deploy script</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;deploy-from-git&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;execute-command&#34;</span><span class="p">:</span> <span class="s2">&#34;/home/user/scripts/deploy&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;command-working-directory&#34;</span><span class="p">:</span> <span class="s2">&#34;/home/user/scripts&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;trigger-rule&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;and&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">      <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nt">&#34;match&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">          <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;payload-hash-sha1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;secret&#34;</span><span class="p">:</span> <span class="s2">&#34;MyTotallySecretString&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;parameter&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">              <span class="nt">&#34;source&#34;</span><span class="p">:</span> <span class="s2">&#34;header&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">              <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;X-Hub-Signature&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">          <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nt">&#34;match&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">          <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;value&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;value&#34;</span><span class="p">:</span> <span class="s2">&#34;refs/heads/master&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;parameter&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">              <span class="nt">&#34;source&#34;</span><span class="p">:</span> <span class="s2">&#34;payload&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">              <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;ref&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">          <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span></code></pre></div><p>The <strong>trigger-rule</strong> in config above will ensure that the script is only triggered when header from Github request contains <strong>&ldquo;X-Hub-Signature&rdquo;</strong> with a secret string and the push has occured in master branch.</p>
<p>Make sure that the secret string (&ldquo;secret&rdquo; : &ldquo;MyTotallySecretString&rdquo;) is randomly generated. This secret will need to be entered in Github settings as well.</p>
<p>For Gitlab and Bitbucket, example hook config can be found on repo page <a href="https://github.com/adnanh/webhook/blob/master/docs/Hook-Examples.md">here</a></p>
<h2 id="expose-your-webhook-server-safely-to-the-internet">Expose your webhook server safely to the internet</h2>
<p>There are 2 ways of exposing the webhook server to github:</p>
<ul>
<li>Proxy using Nginx</li>
<li>Via a tunnel e.g by downloading <a href="https://ngrok.com/product">ngrok</a> and then running <code>ngrok http 9000</code></li>
</ul>
<h3 id="nginx-configuration">Nginx configuration</h3>
<p>Preferably use HTTPS for your domain with Nginx. A good tutorial <a href="https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-18-04">here</a>.</p>
<p>Example Nginx config (HTTPS):</p>
<pre tabindex="0"><code>upstream webhook {
    server localhost:9000;
}

server {
	listen 443 ssl http2;
        server_name YOUR.DOMAIN.COM;
	ssl_certificate YOUR_CERT_CHAIN; # e.g /etc/letsencrypt/live/DOMAIN/fullchain.pem;
	ssl_certificate_key YOUR_CERT_KEY; # e.g /etc/letsencrypt/live/DOMAIN/privkey.pem;
	include /etc/nginx/options-ssl-nginx.conf;
	ssl_dhparam /etc/nginx/ssl-dhparams.pem;
        location ~ ^/hooks/(.+)$ {
		proxy_pass http://webhook;
	}
}
</code></pre><h2 id="add-your-webhook-url-to-github">Add your webhook URL to Github</h2>
<p>Go to the settings page of your Github repo then click on Webhook. Enter the URL of your webhook server. If using Nginx, it should be something like <code>https://YOUR.DOMAIN.COM/hooks/deploy-from-git</code>. Make sure you select content type as <code>application/json</code> and secret to the secret you generated earlier.</p>
<h2 id="bonus-create-a-systemd-user-service-for-webhook-linux">Bonus: Create a systemd user service for webhook (Linux)</h2>
<p>Create a systemd unit file with path <strong>/home/user/.config/systemd/user/webhook.service</strong> . This service does not require sudo/root permissions and can be run by the unprivileged user.</p>
<pre tabindex="0"><code>[Unit]
AssertPathExists=/home/user/scripts

[Service]
WorkingDirectory=/home/user/scripts
ExecStart=/home/user/scripts/webhook -hooks hooks.json -hotreload -logfile webhooks.log
Restart=always
PrivateTmp=true
NoNewPrivileges=true

[Install]
WantedBy=default.target
</code></pre><p>Do <code>systemctl --user daemon-reload</code> and <code>systemctl --user start webhook.service</code>. You can <code>systemctl --user enable webhook.service</code> to ensure that the service always runs when your machine is booted.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Bash function to add TILs</title>
      <link>https://rrampage.github.io/2020/05/23/bash-function-to-add-tils/</link>
      <pubDate>Sat, 23 May 2020 12:42:20 +0000</pubDate>
      
      <guid>https://rrampage.github.io/2020/05/23/bash-function-to-add-tils/</guid>
      <description>Add TIL to a `til.md` file from the command line</description>
      <content:encoded><![CDATA[<h2 id="til-snippet"><code>til</code> snippet</h2>
<p>Here&rsquo;s a snippet I use in my <strong><code>.bashrc</code></strong> file to quickly write down and review TILs (Today I learned):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nv">TIL_FILE</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/my-notes-repo/til.md&#34;</span>
</span></span><span class="line"><span class="cl">til <span class="o">()</span> 
</span></span><span class="line"><span class="cl"><span class="o">{</span> 
</span></span><span class="line"><span class="cl">    <span class="c1"># checks if the function has been called without any argument</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">[[</span> -z <span class="nv">$1</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># opens the file in my editor, setting the cursor to the last line</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># useful to review latest entries or to write a longer entry</span>
</span></span><span class="line"><span class="cl">        vim + <span class="s2">&#34;</span><span class="nv">$TIL_FILE</span><span class="s2">&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># adds a line with today&#39;s date, a TAB and all arguments supplied (&#34;$@&#34;)</span>
</span></span><span class="line"><span class="cl">        <span class="nb">echo</span> -e <span class="s2">&#34;- </span><span class="k">$(</span> date <span class="s1">&#39;+%F&#39;</span> <span class="k">)</span><span class="s2">:\t</span><span class="nv">$@</span><span class="s2">&#34;</span> &gt;&gt; <span class="s2">&#34;</span><span class="nv">$TIL_FILE</span><span class="s2">&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">fi</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="how-to-use">How to use:</h2>
<ul>
<li><strong><code>til</code></strong> to open the file. I use this to review what I learned today  or if I need to write a longer, multiline entry</li>
<li><strong><code>til CONTENT</code></strong> to append a line to the file
<ul>
<li>e.g <code>til grep --line-buffered to immediately print especially when tailing files</code> will add this: <code>- 2020-05-23:   grep --line-buffered to immediately print especially when tailing files</code></li>
</ul>
</li>
</ul>
<h3 id="explanation-on-the-function">Explanation on the function</h3>
<p>In case you missed the comments in the function, here&rsquo;s an explanation of what the various lines do:</p>
<ul>
<li><strong><code>if [[ -z $1 ]];</code></strong> checks if the function has been called without any arguments</li>
<li><strong><code>vim + &quot;$TIL_FILE&quot;</code></strong> opens the file in vim (my preferred editor), setting the cursor to the last line of the file.</li>
<li><strong><code>echo -e &quot;- $tdate:\t$@&quot; &gt;&gt; &quot;$TIL_FILE&quot;;</code></strong> adds a line with today&rsquo;s date, a TAB and all arguments supplied (&quot;$@&quot;) to <code>til</code></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Bash Command Completion - Finding all the cats in your $PATH!</title>
      <link>https://rrampage.github.io/2018/11/15/bash-command-completion-finding-all-the-cats-in-your-path/</link>
      <pubDate>Thu, 15 Nov 2018 09:39:37 +0000</pubDate>
      
      <guid>https://rrampage.github.io/2018/11/15/bash-command-completion-finding-all-the-cats-in-your-path/</guid>
      <description>How to search for programs on the terminal</description>
      <content:encoded><![CDATA[<p>Today, I was curious to find out <strong>how many programs ending with <code>cat</code></strong> I had on my system. I remember using <code>cat</code>, <code>zcat</code> and wanted to know if there are similar programs. Pressing TAB after <code>cat</code> only gives programs which start with <code>cat</code>.</p>
<h2 id="1-apropos">1. <code>apropos</code></h2>
<p>In my <a href="https://dev.to/rrampage/getting-help-in-the-terminal-4cmo">last post</a>, I had mentioned that apropos is a way to search for what programs are available on your system. The search string for <code>apropos</code> can be any regex. So, <code>apropos 'cat$'</code> should solve the problem. <code>cat$</code> means all words ending with &lsquo;cat&rsquo;</p>
<p>The output has</p>
<pre tabindex="0"><code>STAILQ_CONCAT (3)     - implementations of singly-linked lists, singly-linked tail queues, lists and tail queues
OPENSSL_strlcat (3ssl) - Memory allocation functions
..
bzcat (1)            - decompresses files to stdout
cat (1)              - concatenate files and print on the standard output
fc-cat (1)           - read font information cache files
gencat (1)           - Generate message catalog
</code></pre><p>Clearly, the top 2 do not look like programs. Why is <code>apropos</code> then returning them?
Let&rsquo;s have a look at the <code>apropos</code> manual</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">man apropos
</span></span><span class="line"><span class="cl"><span class="c1"># apropos - search the manual page names and descriptions</span>
</span></span></code></pre></div><p>So <code>apropos</code> searches the <code>man</code> pages. And looks like there are <code>man</code> pages for other things and not just programs&hellip;</p>
<p>Digging deeper, let&rsquo;s try manual for the <code>man</code> pages!</p>
<pre tabindex="0"><code>man man
# The table below shows the section numbers of the manual followed by the types of pages they contain.
#       1   Executable programs or shell commands
#       2   System calls (functions provided by the kernel)
#       3   Library calls (functions within program libraries)
#       4   Special files (usually found in /dev)
#       5   File formats and conventions eg /etc/passwd
#       6   Games
#       7   Miscellaneous (including macro packages and conventions), e.g. man(7), groff(7)
#       8   System administration commands (usually only for root)
#       9   Kernel routines [Non standard]
</code></pre><p>Ok. We are interested in are executable programs i.e section 1 of the man pages. <code>apropos</code> has a way to limit which sections we search using<code>-s</code> flag.
<strong><code>apropos -s 1 'cat$'</code></strong> gives us all programs ending with name <code>cat</code> which have an entry in the man pages but it does not show us any programs which do not have a man page.</p>
<h2 id="2-list-all-programs-on-your-path">2. List all programs on your path</h2>
<p>The way Bash knows which programs can be called directly by their name (e.g <code>ls</code>) and not by their full path (e.g <code>/usr/bin/ls</code>) is by looking at the <code>$PATH</code> environment variable.</p>
<p>** Listing all executable files on path **</p>
<p>Here&rsquo;s a small bash snippet which lists the executable files in PATH (let&rsquo;s call it <code>paths.sh</code>)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="c1"># The directories in $PATH are separated by &#34;:&#34;, so we split by it to get individual directories</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> pdir in <span class="k">$(</span><span class="nb">echo</span> <span class="s2">&#34;</span><span class="nv">$PATH</span><span class="s2">&#34;</span> <span class="p">|</span> tr <span class="s2">&#34;:&#34;</span> <span class="s2">&#34;\n&#34;</span><span class="k">)</span>
</span></span><span class="line"><span class="cl"><span class="k">do</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># We `find` all files in the directory which are executable and print the filename</span>
</span></span><span class="line"><span class="cl">    find <span class="s2">&#34;</span><span class="nv">$pdir</span><span class="s2">&#34;</span> -maxdepth <span class="m">1</span> -executable -type f -printf <span class="s2">&#34;%f\n&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">done</span>
</span></span></code></pre></div><p>If you prefer Python, here&rsquo;s a small Python program for the same (let&rsquo;s call it <code>paths.py</code>)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">chain</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="n">path_dirs</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s1">&#39;PATH&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;:&#39;</span><span class="p">)</span> <span class="c1"># Split PATH by &#39;:&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">path_dirs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">all_files</span> <span class="o">=</span> <span class="n">chain</span><span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">walk</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">path_dirs</span><span class="p">))</span> <span class="c1"># Iterable of all files in the directories contained in PATH</span>
</span></span><span class="line"><span class="cl"><span class="n">is_exec</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span> <span class="p">:</span> <span class="n">os</span><span class="o">.</span><span class="n">access</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">os</span><span class="o">.</span><span class="n">X_OK</span><span class="p">)</span> <span class="c1"># Function to check if a filename is executable</span>
</span></span><span class="line"><span class="cl"><span class="n">execs</span> <span class="o">=</span> <span class="n">chain</span><span class="p">(</span><span class="o">*</span><span class="p">([</span><span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">fs</span> <span class="k">if</span> <span class="n">is_exec</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">r</span><span class="p">,</span><span class="n">f</span><span class="p">))]</span> <span class="k">for</span> <span class="n">r</span><span class="p">,</span><span class="n">_</span><span class="p">,</span><span class="n">fs</span> <span class="ow">in</span> <span class="n">all_files</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">execs</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span></span></code></pre></div><p>Running either our Bash or Python scripts will give us the correct output!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sh paths.sh <span class="p">|</span> grep <span class="s1">&#39;cat$&#39;</span>
</span></span><span class="line"><span class="cl">python3 paths.py <span class="p">|</span> grep <span class="s1">&#39;cat$&#39;</span>
</span></span></code></pre></div><h2 id="3-power-of-bash-completion">3. Power of Bash Completion!</h2>
<p>When I press TAB TAB after typing a letter, I get a list of suggestions. How does Bash do that? The <a href="https://www.gnu.org/software/bash/manual/html_node/Programmable-Completion.html">Bash manual</a> says that it uses <code>complete</code> and <code>compgen</code> built-ins for suggesting completions.</p>
<p><code>compgen</code> generates completions using a list of words (-W) or list of commands (-c). The latter is of particular interest to us. <code>compgen -c</code> prints every executable on our path and all shell built-ins and shell-functions.</p>
<p><code>compgen --help</code> prints following message:
<code>compgen: compgen [-abcdefgjksuv] [-o option] [-A action] [-G globpat] [-W wordlist]  [-F function] [-C command] [-X filterpat] [-P prefix] [-S suffix] [word] Display possible completions depending on the options.</code></p>
<p>The options stand for:</p>
<ul>
<li>a : aliases</li>
<li>b : shell builtins</li>
<li><strong>c : executable commands</strong></li>
<li>d : directories in current directory</li>
<li>e : <strong>export</strong> variables</li>
<li>f : files in current directory</li>
<li>g : groups in system</li>
<li>j : pending jobs (in background / stopped)</li>
<li>k : Bash <strong>keywords</strong></li>
<li>s : System services</li>
<li>u : users</li>
<li>v : All shell variables</li>
</ul>
<p>So <strong><code>compgen -c | grep 'cat$'</code></strong> should give us every single executable ending with <code>cat</code>.</p>
<h2 id="epilogue">Epilogue</h2>
<p>Diving into this rabbit-hole has given me a better understanding of how Bash completion works, how apropos finds relevant programs and why man pages are organized into various sections.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Command-line productivity tips : Getting help in the terminal</title>
      <link>https://rrampage.github.io/2018/11/11/command-line-productivity-tips-getting-help-in-the-terminal/</link>
      <pubDate>Sun, 11 Nov 2018 17:30:30 +0000</pubDate>
      
      <guid>https://rrampage.github.io/2018/11/11/command-line-productivity-tips-getting-help-in-the-terminal/</guid>
      <description>What to do when you are stuck in the command-line</description>
      <content:encoded><![CDATA[<p>The command-line is often a daunting place for beginners. With nothing but a blinking cursor and an unfriendly dark screen staring back at you, despair sets in.</p>
<p>Here are a few things to do if you are stuck:</p>
<h2 id="1-how-to-find-programs-for-specific-tasks">1. How to find programs for specific tasks</h2>
<p>Many times, you want to do a particular task but you do not remember the name of the program which does that. Many shell utilities are not easy to remember at first with their cryptic 2 letter names.</p>
<p>Worry not, there is a command called <strong><code>apropos</code></strong> to help you out!</p>
<p>For example, you want to <strong>show a file with line numbers</strong>. You know that there is a program but have forgotten its name. You can just type <code>apropos -a line number</code> to get a list of programs. We use <code>-a</code> flag so that <code>apropos</code> will only return those programs which have the words <strong><code>line</code> AND <code>number</code></strong> in their description.</p>
<p>On my computer, it gives the following output:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">apropos -a line number
</span></span><span class="line"><span class="cl"><span class="c1"># Output:</span>
</span></span><span class="line"><span class="cl">addr2line <span class="o">(</span>1<span class="o">)</span>        - convert addresses into file names and line numbers.
</span></span><span class="line"><span class="cl">nl <span class="o">(</span>1<span class="o">)</span>               - number lines of files
</span></span><span class="line"><span class="cl">x86_64-linux-gnu-addr2line <span class="o">(</span>1<span class="o">)</span> - convert addresses into file names and line numbers.
</span></span></code></pre></div><p>There are 3 programs which have something to do with numbering lines. Let&rsquo;s find out what each of these programs does.</p>
<h2 id="2-find-out-what-a-program-does">2. Find out what a program does</h2>
<p>Let&rsquo;s have a look at our first candidate <code>addr2line</code>. <strong>Typing <code>--help</code> after the command is one way of finding out what a program does</strong>. It is a convention for command-line programs to print a small help message when you call them with <code>--help</code>. Some programs also allow do the same on calling with <code>-h</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">addr2line --help
</span></span><span class="line"><span class="cl"><span class="c1"># Output:</span>
</span></span><span class="line"><span class="cl">Usage: addr2line <span class="o">[</span>option<span class="o">(</span>s<span class="o">)]</span> <span class="o">[</span>addr<span class="o">(</span>s<span class="o">)]</span>
</span></span><span class="line"><span class="cl"> Convert addresses into line number/file name pairs.
</span></span><span class="line"><span class="cl"> If no addresses are specified on the <span class="nb">command</span> line, they will be <span class="nb">read</span> from stdin
</span></span><span class="line"><span class="cl">....
</span></span></code></pre></div><p>Ok. This does program does something with <code>addresses</code>, not what we are looking for. Moving on to the next in our list: <code>nl</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">nl --help
</span></span><span class="line"><span class="cl"><span class="c1"># Output:</span>
</span></span><span class="line"><span class="cl">Usage: nl <span class="o">[</span>OPTION<span class="o">]</span>... <span class="o">[</span>FILE<span class="o">]</span>...
</span></span><span class="line"><span class="cl">Write each FILE to standard output, with line numbers added.
</span></span><span class="line"><span class="cl">...
</span></span></code></pre></div><p>Looks like we found our program. Let&rsquo;s try it out. This is our file <code>foo.txt</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">cat foo.txt
</span></span><span class="line"><span class="cl"><span class="c1"># Output:</span>
</span></span><span class="line"><span class="cl">one
</span></span><span class="line"><span class="cl">two
</span></span><span class="line"><span class="cl">three
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">four
</span></span><span class="line"><span class="cl">five
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">nl foo.txt
</span></span><span class="line"><span class="cl"><span class="c1"># Output:</span>
</span></span><span class="line"><span class="cl">     <span class="m">1</span>  one
</span></span><span class="line"><span class="cl">     <span class="m">2</span>  two
</span></span><span class="line"><span class="cl">     <span class="m">3</span>  three
</span></span><span class="line"><span class="cl">       
</span></span><span class="line"><span class="cl">     <span class="m">4</span>  four
</span></span><span class="line"><span class="cl">     <span class="m">5</span>  five
</span></span></code></pre></div><p>It works ok but why is it not numbering blank lines?</p>
<h2 id="3-getting-detailed-information-about-a-program">3. Getting detailed information about a program</h2>
<p>The <code>--help</code> messages are very concise. If we want to know in detail what a program does, we need to consult the manual or <code>man</code> pages. These pages are very detailed documentation of what a program does, all its possible options and arguments. Type <code>man nl</code> and have a look at the information&hellip;</p>
<p>Woah! The terminal screen is filled with information!. You can navigate up and down using the arrow keys and press <code>q</code> to quit.</p>
<p>We can see the following in the output:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">-b, --body-numbering<span class="o">=</span>STYLE
</span></span><span class="line"><span class="cl">              use STYLE <span class="k">for</span> numbering body lines
</span></span><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">STYLE is one of:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">       a      number all lines
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">       t      number only nonempty lines
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">       n      number no lines
</span></span></code></pre></div><p>So, <strong><code>nl -b a foo.txt</code></strong> will number <strong>all</strong> lines in foo.txt which is what we want.</p>
<pre tabindex="0"><code>nl -b a foo.txt
# Output:
     1  one
     2  two
     3  three
     4
     5  four
     6  five
</code></pre><p>That seems to solve our problem.</p>
<p>There is also <code>info</code> command which gives even more detailed usage information. You can try it out using <strong><code>info nl</code></strong>.</p>
<h2 id="4-getting-examples-for-using-a-program">4. Getting examples for using a program</h2>
<p>But what if we just quickly want to get our command to work without having to read a huge wall of text?</p>
<p>Turns out, there is a nifty utility you can install called <strong><code>tldr</code></strong>. If you use <code>node</code> or <code>python</code> you can install using <code>npm install -g tldr</code> or <code>pip install tldr</code> respectively. The <a href="https://tldr.sh/">tldr page</a> has a list of other installation options. After installing it, just try out <code>tldr nl</code> in your terminal</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">tldr nl
</span></span><span class="line"><span class="cl"><span class="c1"># Output:</span>
</span></span><span class="line"><span class="cl">nl
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  A utility <span class="k">for</span> numbering lines, either from a file, or from standard input.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  - Number non-blank lines in a file:
</span></span><span class="line"><span class="cl">    nl file
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">....
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  - Number all lines including blank lines:
</span></span><span class="line"><span class="cl">    nl -b a file
</span></span></code></pre></div><p>There! We can see the example with easy to understand description.</p>
<p><code>tldr</code> is community-driven! People contribute examples for various commands. If your favorite command does not have an entry, you can submit a <a href="https://github.com/tldr-pages/tldr">pull request</a>.</p>
<h2 id="recap">Recap</h2>
<p>To recap, we can:</p>
<ul>
<li>Find out possible programs which do particular tasks using <strong><code>apropos</code></strong></li>
<li>Get help information for <strong><code>$program</code></strong> using <strong><code>$program --help</code></strong> or <strong><code>man $program</code></strong></li>
<li>Get examples using <strong><code>tldr $program</code></strong></li>
</ul>
<h3 id="ps-what-if-we-are-not-able-to-find-programs-for-our-tasks">PS: What if we are not able to find programs for our tasks</h3>
<p>In Section 1, we assume that we will be able to find programs for our task. But many times, we may not have it installed. In such cases, we can search our distribution&rsquo;s package manager e.g <code>apt-get</code> for Ubuntu or <code>yum</code> or <code>dnf</code> for CentOS / Fedora.</p>
<p>In Ubuntu, we can search all available packages in the repositories using <code>apt-cache search $KEYWORD</code>.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Ensuring that a shell script runs exactly once</title>
      <link>https://rrampage.github.io/2018/11/06/ensuring-that-a-shell-script-runs-exactly-once/</link>
      <pubDate>Tue, 06 Nov 2018 18:53:23 +0000</pubDate>
      
      <guid>https://rrampage.github.io/2018/11/06/ensuring-that-a-shell-script-runs-exactly-once/</guid>
      <description>How to ensure that only one instance of a shell script runs at a time</description>
      <content:encoded><![CDATA[<p>Many times, we have shell scripts which perform some important stuff like inserting into database, mailing reports, etc which we want to run exactly one instance of.</p>
<h2 id="enter-locks">Enter locks!</h2>
<p>A simple solution is to create a &ldquo;lock file&rdquo; and check if the file exists when the script starts. If the file is already created, it means another instance of that program is running, so we can fail with message &ldquo;Try again later!&rdquo;. Once the script completes running, it will clean-up and delete the lock file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nv">LOCK_FILE</span><span class="o">=</span>a.lock
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> -f <span class="s2">&#34;</span><span class="nv">$LOCK_FILE</span><span class="s2">&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Lock file already exists, exit the script</span>
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> <span class="s2">&#34;An instance of this script is already running&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">exit</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Create the lock file</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;Locked&#34;</span> &gt; <span class="s2">&#34;</span><span class="nv">$LOCK_FILE</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Do the normal stuff</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># clean-up before exit</span>
</span></span><span class="line"><span class="cl">rm <span class="s2">&#34;</span><span class="nv">$LOCK_FILE</span><span class="s2">&#34;</span>
</span></span></code></pre></div><p>This looks promising but there are issues with this approach. What happens if the script does not end correctly i.e it exits because of some failure before it reaches the clean-up part of the code? Or if it gets forcibly terminated with <code>Ctrl+C</code> or <code>kill</code> command? In both these cases, the created lock file will not be deleted. So next time you run the script, you will always get an error and will have to manually delete the file.</p>
<p>There is another, more subtle error with the above code. A race condition. If two instances of scripts are started around the same time, it is possible that both of them get past the <code>if [ -f &quot;$LOCK_FILE&quot; ]</code> because the second instance may reach that part of the code before the first instance is able to create the lock file. Thus, we have more than one instance running.</p>
<h2 id="a-better-lock">A better lock!</h2>
<p>Is there a way to create a lock file which is more robust to race conditions and non-standard termination (<code>Ctrl+C</code>, <code>kill</code> command, etc)? Linux offers <code>flock</code> a utility to manage locks from shell scripts. Using <code>flock</code>, we can rewrite the above snippet as follows:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nv">LOCK_FILE</span><span class="o">=</span>a.lock
</span></span><span class="line"><span class="cl"><span class="nb">exec</span> 99&gt;<span class="s2">&#34;</span><span class="nv">$LOCK_FILE</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">flock -n <span class="m">99</span> <span class="o">||</span> <span class="nb">exit</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Do stuff and exit!</span>
</span></span></code></pre></div><p>The <code>exec 99&gt;&quot;$LOCK_FILE&quot;</code> creates a file descriptor numbered 99 and assigns it to <code>LOCK_FILE</code>. <a href="https://en.wikipedia.org/wiki/File_descriptor">File descriptors (fd)</a>  0, 1, 2 are for <code>stdin</code>, <code>stdout</code>, <code>stderr</code> respectively. We are creating new fd with a high number to ensure that it does not clash with numbered fds opened later-on by script.</p>
<p><code>flock -n 99 || exit 1</code> does 2 things. Firstly, it acquires an <code>exclusive</code> lock on the file descriptor 99 which refers to our <code>LOCK_FILE</code>. This operation is guaranteed by the linux kernel to be atomic. Secondly, if it fails to acquire the lock, it exits with return code 1. We do not need to worry about any clean up. <code>flock</code> will automatically release the lock when the script exits regardless of how it terminates. This solves our problem!</p>
<p>What if I wanted to add a more informational message instead of exiting directly on failure to acquire lock? We can change the line <code>flock -n 99 || exit 1</code> as follows:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">flock -n <span class="m">99</span>
</span></span><span class="line"><span class="cl"><span class="nv">RC</span><span class="o">=</span><span class="nv">$?</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> <span class="s2">&#34;</span><span class="nv">$RC</span><span class="s2">&#34;</span> !<span class="o">=</span> <span class="m">0</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Send message and exit</span>
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> <span class="s2">&#34;Already running script. Try again after sometime&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">exit</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span></code></pre></div><p>The flock <a href="http://man7.org/linux/man-pages/man1/flock.1.html">man page</a> has an example which you can use to add an exclusive lock to start of any shell script:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">FLOCKER</span><span class="si">}</span><span class="s2">&#34;</span> !<span class="o">=</span> <span class="s2">&#34;</span><span class="nv">$0</span><span class="s2">&#34;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">exec</span> env <span class="nv">FLOCKER</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$0</span><span class="s2">&#34;</span> flock -en <span class="s2">&#34;</span><span class="nv">$0</span><span class="s2">&#34;</span> <span class="s2">&#34;</span><span class="nv">$0</span><span class="s2">&#34;</span> <span class="s2">&#34;</span><span class="nv">$@</span><span class="s2">&#34;</span> <span class="o">||</span> :
</span></span></code></pre></div><p>This boilerplate uses the script file itself as a lock. It works by setting an environment variable <code>$FLOCKER</code> to script file name and executing the script with its original parameters after acquiring the lock. On failure however, it does not print anything and silently exits.</p>
<p><code>$0</code> here stands for name of the script. <code>$@</code> stands for all arguments passed to the script when it was called.</p>
<h2 id="use-case-for-me">Use case for me</h2>
<p>My team uses a test machine where we deploy multiple branches of a code-base. We need to make sure that exactly one person is building the project at a particular time. The deploy script pulls the specified branch of code from <code>git</code> and builds the project, deploys the main service and starts ancillary services. The script takes sometime to execute. If someone tries to deploy another branch while a build is ongoing, both can fail.</p>
<p>With the above snippet, calling the script more than once shows the current branch being built and exits with failure.</p>
<h2 id="further-reading">Further reading</h2>
<ul>
<li>Flock <a href="http://man7.org/linux/man-pages/man1/flock.1.html">man page</a></li>
<li><a href="http://mywiki.wooledge.org/BashFAQ/045">Pitfalls of creating a lock file</a> like in our initial snippet</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Awk - A useful little language</title>
      <link>https://rrampage.github.io/2018/05/26/awk-a-useful-little-language/</link>
      <pubDate>Sat, 26 May 2018 13:58:58 +0000</pubDate>
      
      <guid>https://rrampage.github.io/2018/05/26/awk-a-useful-little-language/</guid>
      <description>Speed up text processing tasks with Awk</description>
      <content:encoded><![CDATA[<p>Awk is a small but capable programming language which is used for processing text. It was developed by Aho, Weinberger, Kerninghan at Bell Labs.</p>
<p><a href="https://twitter.com/b0rk">Julia Evans</a> made an awesome Awk <a href="https://wizardzines.com/comics/awk/">comic</a>:

  <img src="https://wizardzines.com/images/uploads/awk.png" alt="AWK comic"/>
</p>
<p>Awk scans input file as a sequence of lines and splits each line into fields. The field separator is usually whitespace but you can customize it to any character.</p>
<p>An <code>awk</code> program is a sequence of <strong>pattern-action</strong> pairs i.e for each line, it checks if it matches the pattern and if yes, it performs the associated action on the line. Awk can be used interactively or to run saved programs.</p>
<p>Here is what Awk does written in Python-like pseudocode:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">initialize</span><span class="p">()</span> <span class="c1"># Initializes variables in BEGIN block</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">input_lines</span><span class="p">:</span> <span class="c1"># Awk divides file / input into a list of lines</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">condition</span><span class="p">,</span> <span class="n">action</span> <span class="ow">in</span> <span class="n">conditions</span><span class="p">:</span> <span class="c1"># A program is a list of condition-action pairs</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">condition</span><span class="p">(</span><span class="n">line</span><span class="p">):</span> <span class="c1">#match line against condition</span>
</span></span><span class="line"><span class="cl">            <span class="n">action</span><span class="p">()</span> <span class="c1">#perform action on match </span>
</span></span></code></pre></div><p>Here are some small snippets of Awk:</p>
<h2 id="example---hello-world">Example - Hello World!</h2>
<p>You can run <code>awk</code> programs inline or through a file:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">awk <span class="s1">&#39;BEGIN{ print &#34;Hello, World!&#34;}&#39;</span>
</span></span></code></pre></div><p>Alternatively, you can save this to a file <code>hello.awk</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-awk" data-lang="awk"><span class="line"><span class="cl"><span class="nb">BEGIN</span><span class="p">{</span> <span class="kr">print</span> <span class="s2">&#34;Hello, World!&#34;</span><span class="p">}</span>
</span></span></code></pre></div><p>Then run it as <code>awk -f hello.awk</code></p>
<h2 id="example---reading-a-csv-and-printing-a-specific-column">Example - Reading a CSV and printing a specific column</h2>
<p>Let&rsquo;s now do something useful! Download this <a href="https://data.lacity.org/api/views/nxs9-385f/rows.csv">csv</a> which is 2010 census data by zip code in Los Angeles city.</p>
<p>Read the first 3 lines from csv: <code>head -3 2010_Census_Populations_by_Zip_Code.csv</code></p>
<pre tabindex="0"><code>Zip Code,Total Population,Median Age,Total Males,Total Females,Total Households,Average Household Size
91371,1,73.5,0,1,1,1
90001,57110,26.6,28468,28642,12971,4.4
</code></pre><p>We will print just the total column using <code>awk -F, '{print $2}' 2010_Census_Populations_by_Zip_Code.csv</code></p>
<p>The <code>-F,</code> sets the field separator to comma as we need to split by commas for getting fields in a CSV file. <code>$n</code> allows you to use the value in the nth column.</p>
<h2 id="example---computing-some-statistics">Example - Computing some statistics</h2>
<p>Awk allows the use of variables and functions. Let&rsquo;s see how to use them by computing the total population in the entire city.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-awk" data-lang="awk"><span class="line"><span class="cl"><span class="c1"># total.awk</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span><span class="nx">s</span> <span class="o">+=</span> <span class="o">$</span><span class="mi">2</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nb">END</span> <span class="p">{</span><span class="kr">print</span> <span class="s2">&#34;Total population:&#34;</span><span class="p">,</span> <span class="nx">s</span><span class="p">}</span>
</span></span></code></pre></div><p>Variables are by default initialized to 0. Here, we use a variable <code>s</code> to hold the total.</p>
<p>Running this script as <strong><code>awk -F, -f total.awk 2010_Census_Populations_by_Zip_Code.csv</code></strong>, we get output: <code>Total population: 10603988</code></p>
<h2 id="special-variables-and-built-in-functions">Special variables and built-in functions</h2>
<p>Awk uses some special variables and functions to make your programs more compact:</p>
<ul>
<li><strong>NF</strong> : Number of fields in a line</li>
<li><strong>NR</strong> : Line number</li>
<li><strong>$0</strong> : The entire input line</li>
<li><strong>length</strong> : gives number of characters in a string</li>
</ul>
<p>Now, we will compute the average household size which is total population divided by total households. The columns of interest are $2 and $6.
We also want the average population per zip code. Our script:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-awk" data-lang="awk"><span class="line"><span class="cl"><span class="c1"># stats.awk</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span> <span class="nx">s</span> <span class="o">+=</span> <span class="o">$</span><span class="mi">2</span><span class="p">;</span> <span class="nx">h</span> <span class="o">+=</span> <span class="o">$</span><span class="mi">6</span><span class="p">;}</span>
</span></span><span class="line"><span class="cl"><span class="nb">END</span> <span class="p">{</span><span class="kr">print</span> <span class="s2">&#34;Total population:&#34;</span><span class="p">,</span> <span class="nx">s</span><span class="p">,</span> <span class="s2">&#34;\nTotal households:&#34;</span><span class="p">,</span> <span class="nx">h</span><span class="p">,</span> <span class="s2">&#34;\nAverage household size:&#34;</span><span class="p">,</span> <span class="nx">s</span><span class="o">/</span><span class="nx">h</span><span class="p">,</span> <span class="s2">&#34;\nAverage population per zip code:&#34;</span><span class="p">,</span> <span class="nx">s</span><span class="o">/</span><span class="nb">NR</span><span class="p">}</span>
</span></span></code></pre></div><p><code>NR</code> gives us the total number of lines. But we do not want the header line. We can use <code>tail</code> command to skip the 1st line as <code>tail -n +2</code>. Running <strong><code>tail -n +2 2010_Census_Populations_by_Zip_Code.csv | awk -F, -f total.awk</code></strong> gives us :</p>
<pre tabindex="0"><code>Total population: 10603988
Total households: 3497698
Average household size: 3.0317
Average population per zip code: 33241.3
</code></pre><h2 id="example---pattern-matching">Example - Pattern matching</h2>
<p>We have done some useful things with awk so far, but we have ignored its biggest strength - pattern matching. We can match based on field values, regexes, line numbers.</p>
<ul>
<li>Print every 2nd line : <strong><code>NR%2 == 0 {print $0}</code></strong>. Here $0 stands for the entire line.</li>
<li>Print all zip codes with population &gt; 100,000 : <strong><code>$2 &gt; 100000 {print $1}</code></strong></li>
<li>Print all zip codes with population &gt; 10,000 and average household size &gt; 4 : <strong><code>$2 &gt; 10000 &amp;&amp; $7 &gt; 4 { print $1}</code></strong>. We can combine conditions using <code>&amp;&amp;</code> and <code>||</code> which stand for logical <strong>and</strong> and <strong>or</strong> respectively.</li>
</ul>
<h2 id="further-reading">Further reading</h2>
<p>There is a lot more to Awk. Here are some references:</p>
<ul>
<li>
<p>The best resource for learning Awk is <a href="https://ia802309.us.archive.org/25/items/pdfy-MgN0H1joIoDVoIC7/The_AWK_Programming_Language.pdf">The AWK programming language</a> written by the same trio. This book goes over and beyond a typical programming language tutorial and teaches you how to use your Awk superpowers to build versatile systems like a relational database, a parser, an interpreter, etc.</p>
</li>
<li>
<p>The <a href="https://web.archive.org/web/20090410021611/http://www.gnu.org:80/software/gawk/manual/gawk.html">GNU Awk Manual for Effective Awk Programming</a> is a thorough reference.</p>
</li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
