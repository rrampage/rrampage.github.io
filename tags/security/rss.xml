<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>security on A Random Walk</title>
    <link>https://rrampage.github.io/tags/security/</link>
    <description>Recent content in security on A Random Walk</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 28 May 2020 10:42:07 +0000</lastBuildDate><atom:link href="https://rrampage.github.io/tags/security/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>NPM and Node tips to make your dev machine (slightly) safer</title>
      <link>https://rrampage.github.io/2020/05/28/npm-and-node-tips-to-make-your-dev-machine-slightly-safer/</link>
      <pubDate>Thu, 28 May 2020 10:42:07 +0000</pubDate>
      
      <guid>https://rrampage.github.io/2020/05/28/npm-and-node-tips-to-make-your-dev-machine-slightly-safer/</guid>
      <description>NPM is used as a convenient cross-platform package manager for a lot of developer tools. For many tools, the defacto way to install is npm install -g $TOOL. But installing anything via npm allows it to run untrusted code on your machine.
Here are a few tips to minimize the risk:
1. NEVER run npm as sudo/root Node&amp;rsquo;s official documentation recommends not installing global packages as sudo/root. If you have already installed node through nvm ignore this step. If you use a system installed node e.g using Ubuntu&amp;rsquo;s apt-get, read through this guide for Linux/Mac or npm-g-nosudo which is a shell script for Linux.
If you are lazy (like me), here&amp;rsquo;s a summary from the linked guide: mkdir -p &amp;#34;${HOME}/.npm-packages&amp;#34; &amp;amp;&amp;amp; npm config set prefix &amp;#34;${HOME}/.npm-packages&amp;#34; Add this to your .bashrc or .zshrc:
NPM_PACKAGES=&amp;#34;${HOME}/.npm-packages&amp;#34; export PATH=&amp;#34;$PATH:$NPM_PACKAGES/bin&amp;#34; # Preserve MANPATH if you already defined it somewhere in your config. # Otherwise, fall back to `manpath` so we can inherit from `/etc/manpath`. export MANPATH=&amp;#34;${MANPATH-$(manpath)}:$NPM_PACKAGES/share/man&amp;#34; 2.</description>
      <content:encoded><![CDATA[<p>NPM is used as a convenient cross-platform package manager for <a href="https://hackernoon.com/the-best-of-npm-install-g-9ab9d749eeb1">a lot of developer tools</a>. For many tools, the defacto way to install is <strong><code>npm install -g $TOOL</code></strong>. But installing anything via npm allows it to run untrusted code on your machine.</p>
<p>Here are a few tips to minimize the risk:</p>
<h2 id="1-never-run-npm-as-sudoroot">1. NEVER run npm as sudo/root</h2>
<p><a href="https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally">Node&rsquo;s official documentation</a> recommends not installing global packages as sudo/root. If you have already installed node through <code>nvm</code> ignore this step. If you use a system installed <code>node</code> e.g using Ubuntu&rsquo;s apt-get, read through <strong><a href="https://github.com/sindresorhus/guides/blob/master/npm-global-without-sudo.md">this guide</a></strong> for Linux/Mac or <a href="https://github.com/glenpike/npm-g_nosudo">npm-g-nosudo</a> which is a shell script for Linux.</p>
<h3 id="if-you-are-lazy-like-me-heres-a-summary-from-the-linked-guide">If you are lazy (like me), here&rsquo;s a summary from the linked guide:</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir -p <span class="s2">&#34;</span><span class="si">${</span><span class="nv">HOME</span><span class="si">}</span><span class="s2">/.npm-packages&#34;</span> <span class="o">&amp;&amp;</span> npm config <span class="nb">set</span> prefix <span class="s2">&#34;</span><span class="si">${</span><span class="nv">HOME</span><span class="si">}</span><span class="s2">/.npm-packages&#34;</span>
</span></span></code></pre></div><p>Add this to your <code>.bashrc</code> or <code>.zshrc</code>:</p>
<pre tabindex="0"><code>NPM_PACKAGES=&#34;${HOME}/.npm-packages&#34;
export PATH=&#34;$PATH:$NPM_PACKAGES/bin&#34;
# Preserve MANPATH if you already defined it somewhere in your config.
# Otherwise, fall back to `manpath` so we can inherit from `/etc/manpath`.
export MANPATH=&#34;${MANPATH-$(manpath)}:$NPM_PACKAGES/share/man&#34;
</code></pre><h2 id="2-installuse-node-using-nvm-or-asdf">2. Install/Use node using <code>nvm</code> or <code>asdf</code></h2>
<p><a href="https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally">Node&rsquo;s official documentation</a> recommends installing node as an unprivileged user using a node version manager.</p>
<p>Here are the steps:</p>
<ul>
<li>Install <a href="https://github.com/nvm-sh/nvm">nvm</a>. This does not work for Windows, use <a href="https://github.com/coreybutler/nvm-windows">nvm-windows</a> which is a totally different project from nvm.
<ul>
<li>Unfortunately, <code>nvm</code> suffers from the curl pipe to bash install as its main way to install.</li>
<li>If you have git installed on your machine, you can also directly clone it using the following steps:
<ul>
<li><code>cd &quot;$HOME&quot; &amp;&amp; git clone https://github.com/nvm-sh/nvm.git .nvm</code></li>
<li><code>cd &quot;$HOME/.nvm&quot; &amp;&amp; git checkout v0.35.3 &amp;&amp; . nvm.sh</code></li>
<li>Add to your .bashrc or .zshrc:</li>
</ul>
</li>
</ul>
</li>
</ul>
<pre tabindex="0"><code>export NVM_DIR=&#34;$HOME/.nvm&#34;
[ -s &#34;$NVM_DIR/nvm.sh&#34; ] &amp;&amp; \. &#34;$NVM_DIR/nvm.sh&#34;  # This loads nvm
[ -s &#34;$NVM_DIR/bash_completion&#34; ] &amp;&amp; \. &#34;$NVM_DIR/bash_completion&#34;  # This loads nvm bash_completion
</code></pre><ul>
<li><code>nvm install --lts</code> or whichever version of node you need.</li>
<li><code>nvm use node</code></li>
<li>To use a node version by default, <code>echo &quot;lts/*&quot; &gt; &quot;$HOME/.nvmrc&quot;</code></li>
</ul>
<h2 id="3-list-all-your-globally-installed-npm-packages-and-remove-any-unnecessary-ones">3. List all your globally installed npm packages and remove any unnecessary ones</h2>
<p>Listing global packages is done with <strong><code>npm ls -g --depth 0</code></strong>
Remove any unnecessary packages with <strong><code>npm uninstall -g $TOOL</code></strong>
You can check your shell history/scripts folders to see if you actually use many of the global packages.</p>
<h2 id="4-audit-your-packages">4. Audit your packages</h2>
<p>Run <strong><code>npm audit</code></strong> in your project regularly to see if <a href="https://docs.npmjs.com/auditing-package-dependencies-for-security-vulnerabilities">any dependencies are vulnerable</a>. This only works for your development projects, not global packages.</p>
<h3 id="a-hacky-wayhttpsstackoverflowcoma53619858-to-npm-audit--global-packages"><a href="https://stackoverflow.com/a/53619858">A (hacky) way</a> to <code>npm audit</code>  global packages:</h3>
<ul>
<li>Run <code>npm</code>. The last line will show the folder of the global npm packages e.g <code>$HOME/.npm-packages/lib/node_modules/npm</code></li>
<li>Go to <code>$HOME/.npm-packages/lib</code> and run <code>npm init -y</code> and then run <code>npm i --package-lock-only</code>. These steps are required as <code>npm audit</code> checks for <code>package.json</code> and <code>package-lock.json</code></li>
<li>Now run <code>npm audit</code>. Remove any dependencies which have high or too many moderate vulnerabilities. These could either be malicious or unmaintained tools.</li>
<li>Remove the <code>package.json</code> and <code>package-lock.json</code> after the audit</li>
</ul>
<h2 id="5-use-npx-to-run-executables">5. Use <code>npx</code> to run executables</h2>
<p>Many times, it is not necessary to have a tool installed globally e.g <code>create-react-app</code>. Node 6+ comes with <code>npx</code> which allows you to temporarily download and run scripts. The benefits of using <code>npx</code> over <code>npm install -g</code> are beautifully explained in <a href="https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b">this post</a>.</p>
<p>A gist of the article:</p>
<blockquote>
<p>Calling npx <command> when <command> isn’t already in your $PATH will automatically install a package with that name from the npm registry for you, and invoke it. When it’s done, the installed package won’t be anywhere in your globals, so you won’t have to worry about pollution in the long-term.</p>
</blockquote>
<blockquote>
<p>This feature is ideal for things like generators, too. Tools like yeoman or create-react-app only ever get called once in a blue moon. <strong>By the time you run them again, they’ll already be far out of date, so you end up having to run an install every time you want to use them anyway.</strong></p>
</blockquote>
<h2 id="bonus--use-deno-for-developer-tools">Bonus : Use Deno for developer tools</h2>
<p>I think a project like <a href="https://deno.land/">deno</a> with good sandbox capabilities and <a href="https://deno.land/manual/getting_started/permissions">limited permisisons</a> is the best choice for a lot of developer tools currently made using Node. Read <a href="https://www.jeremymorgan.com/blog/programming/what-is-deno/">this post</a> for more details on why everyone is talking about Deno.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Does this solve all security issues of <code>node</code>/<code>npm</code> on your machine? No! There are a <a href="https://blog.npmjs.org/post/180565383195/details-about-the-event-stream-incident">lot</a> <a href="https://blog.npmjs.org/post/185397814280/plot-to-steal-cryptocurrency-foiled-by-the-npm">of</a> <a href="https://blog.npmjs.org/post/175824896885/incident-report-npm-inc-operations-incident-of">ways</a> in which a malicious attacker can compromise your machine/project. This only prevents a bad npm tool from getting root access and removes globally installed npm tools with known insecure dependencies.</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
