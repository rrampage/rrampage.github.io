<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Java on A Random Walk</title>
    <link>https://rrampage.github.io/tags/java/</link>
    <description>Recent content in Java on A Random Walk</description>
    <generator>Hugo -- 0.144.2</generator>
    <language>en</language>
    <lastBuildDate>Sat, 18 Aug 2018 17:52:23 +0000</lastBuildDate>
    <atom:link href="https://rrampage.github.io/tags/java/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Algorithms: Gray Binary Code</title>
      <link>https://rrampage.github.io/2018/08/18/algorithms-gray-binary-code/</link>
      <pubDate>Sat, 18 Aug 2018 17:52:23 +0000</pubDate>
      <guid>https://rrampage.github.io/2018/08/18/algorithms-gray-binary-code/</guid>
      <description>Gray Binary Code - A different way of ordering numbers</description>
    </item>
    <item>
      <title>100 Days Of Code</title>
      <link>https://rrampage.github.io/2018/08/13/100-days-of-code/</link>
      <pubDate>Mon, 13 Aug 2018 13:40:27 +0000</pubDate>
      <guid>https://rrampage.github.io/2018/08/13/100-days-of-code/</guid>
      <description>My 100 Days Of Code Challenge</description>
    </item>
    <item>
      <title>JVM Primer Part 2 - Debugging memory issues</title>
      <link>https://rrampage.github.io/2018/05/16/jvm-primer-part-2-debugging-memory-issues/</link>
      <pubDate>Wed, 16 May 2018 11:53:42 +0000</pubDate>
      <guid>https://rrampage.github.io/2018/05/16/jvm-primer-part-2-debugging-memory-issues/</guid>
      <description>JVM Primer - Debugging memory issues</description>
    </item>
    <item>
      <title>A Primer on JVM Memory Management and Troubleshooting - 1</title>
      <link>https://rrampage.github.io/2018/05/15/a-primer-on-jvm-memory-management-and-troubleshooting-1/</link>
      <pubDate>Tue, 15 May 2018 14:14:49 +0000</pubDate>
      <guid>https://rrampage.github.io/2018/05/15/a-primer-on-jvm-memory-management-and-troubleshooting-1/</guid>
      <description>&lt;p&gt;This series is a summary of Oracle&amp;rsquo;s &lt;a href=&#34;https://apexapps.oracle.com/pls/apex/f?p=44785:149:105166169953256::NO:RP,149:P149_EVENT_ID:5552&#34;&gt;JVM troubleshooting course&lt;/a&gt; which gives an overview on JVM memory management, Hotspot VM&amp;rsquo;s garbage collection options, various memory errors and how to troubleshoot them.&lt;/p&gt;
&lt;p&gt;In this post (part 1), we will have a look at how JVM manages memory and its different garbage collectors.&lt;/p&gt;
&lt;p&gt;You can find Part 2 &lt;a href=&#34;https://dev.to/rrampage/jvm-primer-part-2---debugging-performance-issues-1od&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;jvm-memory-management-overview&#34;&gt;JVM Memory Management Overview&lt;/h3&gt;
&lt;p&gt;The JVM provides automatic memory management to free the programmer from manually managing memory. New objects are allocated on heap memory. A &lt;strong&gt;root set&lt;/strong&gt; consists of pointers to external memory, static variables, threads, &lt;a href=&#34;https://en.wikipedia.org/wiki/Java_Native_Interface&#34;&gt;JNI&lt;/a&gt; references and internal JVM structures. Objects directly reachable from the root set must be kept in heap. Objects reachable from any of the reachable objects must also be in heap. This group of objects are the only ones which can be used by a program. The unreachable objects (garbage) are removed using a process called &lt;strong&gt;garbage collection (GC)&lt;/strong&gt;. Reachable objects are &lt;strong&gt;compacted&lt;/strong&gt; i.e moved to contiguous space in heap. This is important as otherwise, the heap will become &lt;a href=&#34;https://en.wikipedia.org/wiki/Fragmentation_(computing)&#34;&gt;fragmented&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
