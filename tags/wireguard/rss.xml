<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Wireguard on A Random Walk</title>
    <link>https://rrampage.github.io/tags/wireguard/</link>
    <description>Recent content in Wireguard on A Random Walk</description>
    <generator>Hugo -- 0.144.2</generator>
    <language>en</language>
    <lastBuildDate>Fri, 14 Dec 2018 11:48:44 +0000</lastBuildDate>
    <atom:link href="https://rrampage.github.io/tags/wireguard/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Easy VPN using Wireguard</title>
      <link>https://rrampage.github.io/2018/12/14/easy-vpn-using-wireguard/</link>
      <pubDate>Fri, 14 Dec 2018 11:48:44 +0000</pubDate>
      <guid>https://rrampage.github.io/2018/12/14/easy-vpn-using-wireguard/</guid>
      <description>Setup a painless VPN using Wireguard</description>
      <content:encoded><![CDATA[<h2 id="why-wireguard-and-how-does-it-work">Why Wireguard and How does it work?</h2>
<ul>
<li>Simple (one config file on server and client and one command to run)</li>
<li>Small codebase (5000 LOC) unlike OpenVPN and IPSEC</li>
<li>Scheduled to be merged into Linux kernel soon</li>
</ul>
<p>Wireguard works by creating a tunnel to the server using a separate network interface on your machine.
You do not need to worry about Proxy settings and all your applications will work without issue.</p>
<h2 id="installation-and-key-generation">Installation and Key Generation</h2>
<p>Do this on both server and client machines</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1">#Installation: For both machines</span>
</span></span><span class="line"><span class="cl">sudo apt install wireguard wireguard-tools openresolv
</span></span><span class="line"><span class="cl"><span class="c1"># openresolv is in case you are using systemd-resolved which is default for DNS resolution on Ubuntu</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Generate private and public key pair : For both machines</span>
</span></span><span class="line"><span class="cl"><span class="nb">umask</span> <span class="m">077</span>
</span></span><span class="line"><span class="cl">wg genkey <span class="p">|</span> tee privatekey <span class="p">|</span> wg pubkey &gt; publickey
</span></span></code></pre></div><h2 id="configure-server">Configure Server</h2>
<p>Create file called <code>/etc/wireguard/wg0.conf</code></p>
<pre tabindex="0"><code>[Interface]
PrivateKey = &lt;Private Key&gt;
ListenPort = &lt;UDP Port to listen on, by default it is 51820&gt;
Address = 192.168.2.1/24, fd86:ea04:1115::1/64
ListenPort = 51820
PostUp = iptables -A FORWARD -i wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE; ip6tables -A FORWARD -i wg0 -j ACCEPT; ip6tables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
PostDown = iptables -D FORWARD -i wg0 -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE; ip6tables -D FORWARD -i wg0 -j ACCEPT; ip6tables -t nat -D POSTROUTING -o eth0 -j MASQUERADE
SaveConfig = true

[Peer]
PublicKey = &lt;Client Public Key&gt;
AllowedIPs = 192.168.2.2/32
</code></pre><p>Note that you have to paste the <strong>contents</strong> of the private key in the conf file, not the path.
The <strong>PostUp</strong> sets up forwarding rules when the wiregaurd interface is started. <strong>PostDown</strong> deletes the rules when the interface is shutdown.
Packet forwarding is essential if you want to use your server as a VPN to the general internet. Enable it on your server by adding the following to <code>/etc/sysctl.conf</code> and run <code>sudo sysctl -p</code> to reload the configuration changes.</p>
<pre tabindex="0"><code># Add to end of /etc/sysctl.conf
net.ipv4.ip_forward=1
net.ipv6.conf.all.forwarding=1
</code></pre><p>Whitelist the UDP port so that it is reachable by client</p>
<pre tabindex="0"><code>sudo ufw allow 51820/udp
sudo ufw enable
</code></pre><h2 id="configure-client">Configure Client</h2>
<p>Create file called <code>/etc/wireguard/wg0.conf</code></p>
<pre tabindex="0"><code>[Interface]
PrivateKey = &lt;Private Key&gt;
Address = 192.168.2.2/32
SaveConfig = true

[Peer]
PublicKey = &lt;Server Public Key&gt;
AllowedIPs = 0.0.0.0/0, ::/0
Endpoint = &lt;Server Public IP: Port e.g 23.23.23.23:2323&gt;
</code></pre><p>Note that the <strong>Address</strong> in interface part of client must be within range of <strong>AllowedIPs</strong> in server&rsquo;s config.
If you are not using the server as a VPN, you can restrict the <strong>AllowedIPs</strong> section of client.</p>
<h2 id="start-server-and-client">Start Server and Client</h2>
<p>Run <code>sudo wg-quick up wg0</code>
Enable it to run as service on system startup using <code>sudo systemctl enable wg-quick@wg0</code>
If you want to stop, use <code>sudo wg-quick down wg0</code></p>
<h2 id="test-connection">Test connection</h2>
<pre tabindex="0"><code># Ping Google
ping -c3 8.8.8.8
sudo wg # shows tyou status of the wireguard connection
</code></pre><h2 id="resources">Resources</h2>
<ul>
<li><a href="https://www.wireguard.com/papers/wireguard.pdf">Whitepaper</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-create-a-point-to-point-vpn-with-wireguard-on-ubuntu-16-04">Adapted from</a></li>
<li><a href="https://www.timdoug.com/log/2018/08/04/#wireguard_macos">OSX</a></li>
<li><a href="https://play.google.com/store/apps/details?id=com.wireguard.android&amp;hl=en_US">Android client</a></li>
<li><a href="https://www.wireguard.com/install/">More platforms</a></li>
</ul>
]]></content:encoded>
    </item>
  </channel>
</rss>
